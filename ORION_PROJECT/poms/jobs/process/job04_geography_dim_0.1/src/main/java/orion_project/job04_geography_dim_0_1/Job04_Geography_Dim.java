// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package orion_project.job04_geography_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendStringUtil;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Job04_Geography_Dim Purpose: filling Geography_Dim table<br>
 * Description:  <br>
 * @author toihir.alfahami@uit.ac.ma
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class Job04_Geography_Dim implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Job04_Geography_Dim";
	private final String projectName = "ORION_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Job04_Geography_Dim.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Job04_Geography_Dim.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_county_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_state_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_country_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_continent_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class geography_dimStruct implements routines.system.IPersistableRow<geography_dimStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public double Street_ID;

				public double getStreet_ID () {
					return this.Street_ID;
				}
				
			    public String Continent;

				public String getContinent () {
					return this.Continent;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String State_Code;

				public String getState_Code () {
					return this.State_Code;
				}
				
			    public String State;

				public String getState () {
					return this.State;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String Province;

				public String getProvince () {
					return this.Province;
				}
				
			    public String County;

				public String getCounty () {
					return this.County;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Postal_Code;

				public String getPostal_Code () {
					return this.Postal_Code;
				}
				
			    public String Street_Name;

				public String getStreet_Name () {
					return this.Street_Name;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Street_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final geography_dimStruct other = (geography_dimStruct) obj;
		
						if (this.Street_ID != other.Street_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(geography_dimStruct other) {

		other.Street_ID = this.Street_ID;
	            other.Continent = this.Continent;
	            other.Country = this.Country;
	            other.State_Code = this.State_Code;
	            other.State = this.State;
	            other.Region = this.Region;
	            other.Province = this.Province;
	            other.County = this.County;
	            other.City = this.City;
	            other.Postal_Code = this.Postal_Code;
	            other.Street_Name = this.Street_Name;
	            
	}

	public void copyKeysDataTo(geography_dimStruct other) {

		other.Street_ID = this.Street_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
			        this.Street_ID = dis.readDouble();
					
					this.Continent = readString(dis);
					
					this.Country = readString(dis);
					
					this.State_Code = readString(dis);
					
					this.State = readString(dis);
					
					this.Region = readString(dis);
					
					this.Province = readString(dis);
					
					this.County = readString(dis);
					
					this.City = readString(dis);
					
					this.Postal_Code = readString(dis);
					
					this.Street_Name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.Street_ID);
					
					// String
				
						writeString(this.Continent,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.State_Code,dos);
					
					// String
				
						writeString(this.State,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.Province,dos);
					
					// String
				
						writeString(this.County,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Postal_Code,dos);
					
					// String
				
						writeString(this.Street_Name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Street_ID="+String.valueOf(Street_ID));
		sb.append(",Continent="+Continent);
		sb.append(",Country="+Country);
		sb.append(",State_Code="+State_Code);
		sb.append(",State="+State);
		sb.append(",Region="+Region);
		sb.append(",Province="+Province);
		sb.append(",County="+County);
		sb.append(",City="+City);
		sb.append(",Postal_Code="+Postal_Code);
		sb.append(",Street_Name="+Street_Name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(geography_dimStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Street_ID, other.Street_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class street_codeStruct implements routines.system.IPersistableRow<street_codeStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];

	
			    public Double STREET_ID;

				public Double getSTREET_ID () {
					return this.STREET_ID;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String STREET_NAME;

				public String getSTREET_NAME () {
					return this.STREET_NAME;
				}
				
			    public Double CITY_ID;

				public Double getCITY_ID () {
					return this.CITY_ID;
				}
				
			    public String POSTAL_CODE;

				public String getPOSTAL_CODE () {
					return this.POSTAL_CODE;
				}
				
			    public Double FROM_STREET_NUM;

				public Double getFROM_STREET_NUM () {
					return this.FROM_STREET_NUM;
				}
				
			    public Double TO_STREET_NUM;

				public Double getTO_STREET_NUM () {
					return this.TO_STREET_NUM;
				}
				
			    public String CITY_NAME;

				public String getCITY_NAME () {
					return this.CITY_NAME;
				}
				
			    public Double COUNT;

				public Double getCOUNT () {
					return this.COUNT;
				}
				
			    public Double COUNTY_ID;

				public Double getCOUNTY_ID () {
					return this.COUNTY_ID;
				}
				
			    public Double POSTAL_CODE_ID;

				public Double getPOSTAL_CODE_ID () {
					return this.POSTAL_CODE_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.STREET_ID = null;
           				} else {
           			    	this.STREET_ID = dis.readDouble();
           				}
					
					this.COUNTRY = readString(dis);
					
					this.STREET_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CITY_ID = null;
           				} else {
           			    	this.CITY_ID = dis.readDouble();
           				}
					
					this.POSTAL_CODE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FROM_STREET_NUM = null;
           				} else {
           			    	this.FROM_STREET_NUM = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TO_STREET_NUM = null;
           				} else {
           			    	this.TO_STREET_NUM = dis.readDouble();
           				}
					
					this.CITY_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNT = null;
           				} else {
           			    	this.COUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNTY_ID = null;
           				} else {
           			    	this.COUNTY_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSTAL_CODE_ID = null;
           				} else {
           			    	this.POSTAL_CODE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.STREET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.STREET_ID);
		            	}
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.STREET_NAME,dos);
					
					// Double
				
						if(this.CITY_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CITY_ID);
		            	}
					
					// String
				
						writeString(this.POSTAL_CODE,dos);
					
					// Double
				
						if(this.FROM_STREET_NUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FROM_STREET_NUM);
		            	}
					
					// Double
				
						if(this.TO_STREET_NUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TO_STREET_NUM);
		            	}
					
					// String
				
						writeString(this.CITY_NAME,dos);
					
					// Double
				
						if(this.COUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNT);
		            	}
					
					// Double
				
						if(this.COUNTY_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNTY_ID);
		            	}
					
					// Double
				
						if(this.POSTAL_CODE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSTAL_CODE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("STREET_ID="+String.valueOf(STREET_ID));
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",STREET_NAME="+STREET_NAME);
		sb.append(",CITY_ID="+String.valueOf(CITY_ID));
		sb.append(",POSTAL_CODE="+POSTAL_CODE);
		sb.append(",FROM_STREET_NUM="+String.valueOf(FROM_STREET_NUM));
		sb.append(",TO_STREET_NUM="+String.valueOf(TO_STREET_NUM));
		sb.append(",CITY_NAME="+CITY_NAME);
		sb.append(",COUNT="+String.valueOf(COUNT));
		sb.append(",COUNTY_ID="+String.valueOf(COUNTY_ID));
		sb.append(",POSTAL_CODE_ID="+String.valueOf(POSTAL_CODE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(street_codeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];

	
			    public Double STREET_ID;

				public Double getSTREET_ID () {
					return this.STREET_ID;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String STREET_NAME;

				public String getSTREET_NAME () {
					return this.STREET_NAME;
				}
				
			    public Double CITY_ID;

				public Double getCITY_ID () {
					return this.CITY_ID;
				}
				
			    public String POSTAL_CODE;

				public String getPOSTAL_CODE () {
					return this.POSTAL_CODE;
				}
				
			    public Double FROM_STREET_NUM;

				public Double getFROM_STREET_NUM () {
					return this.FROM_STREET_NUM;
				}
				
			    public Double TO_STREET_NUM;

				public Double getTO_STREET_NUM () {
					return this.TO_STREET_NUM;
				}
				
			    public String CITY_NAME;

				public String getCITY_NAME () {
					return this.CITY_NAME;
				}
				
			    public Double COUNT;

				public Double getCOUNT () {
					return this.COUNT;
				}
				
			    public Double COUNTY_ID;

				public Double getCOUNTY_ID () {
					return this.COUNTY_ID;
				}
				
			    public Double POSTAL_CODE_ID;

				public Double getPOSTAL_CODE_ID () {
					return this.POSTAL_CODE_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.STREET_ID = null;
           				} else {
           			    	this.STREET_ID = dis.readDouble();
           				}
					
					this.COUNTRY = readString(dis);
					
					this.STREET_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CITY_ID = null;
           				} else {
           			    	this.CITY_ID = dis.readDouble();
           				}
					
					this.POSTAL_CODE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FROM_STREET_NUM = null;
           				} else {
           			    	this.FROM_STREET_NUM = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TO_STREET_NUM = null;
           				} else {
           			    	this.TO_STREET_NUM = dis.readDouble();
           				}
					
					this.CITY_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNT = null;
           				} else {
           			    	this.COUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNTY_ID = null;
           				} else {
           			    	this.COUNTY_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POSTAL_CODE_ID = null;
           				} else {
           			    	this.POSTAL_CODE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.STREET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.STREET_ID);
		            	}
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.STREET_NAME,dos);
					
					// Double
				
						if(this.CITY_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CITY_ID);
		            	}
					
					// String
				
						writeString(this.POSTAL_CODE,dos);
					
					// Double
				
						if(this.FROM_STREET_NUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FROM_STREET_NUM);
		            	}
					
					// Double
				
						if(this.TO_STREET_NUM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TO_STREET_NUM);
		            	}
					
					// String
				
						writeString(this.CITY_NAME,dos);
					
					// Double
				
						if(this.COUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNT);
		            	}
					
					// Double
				
						if(this.COUNTY_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNTY_ID);
		            	}
					
					// Double
				
						if(this.POSTAL_CODE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POSTAL_CODE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("STREET_ID="+String.valueOf(STREET_ID));
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",STREET_NAME="+STREET_NAME);
		sb.append(",CITY_ID="+String.valueOf(CITY_ID));
		sb.append(",POSTAL_CODE="+POSTAL_CODE);
		sb.append(",FROM_STREET_NUM="+String.valueOf(FROM_STREET_NUM));
		sb.append(",TO_STREET_NUM="+String.valueOf(TO_STREET_NUM));
		sb.append(",CITY_NAME="+CITY_NAME);
		sb.append(",COUNT="+String.valueOf(COUNT));
		sb.append(",COUNTY_ID="+String.valueOf(COUNTY_ID));
		sb.append(",POSTAL_CODE_ID="+String.valueOf(POSTAL_CODE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);

		street_codeStruct street_code = new street_codeStruct();
geography_dimStruct geography_dim = new geography_dimStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("geography_dim"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "Geography_Dim";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "db_entrepot" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "db_entrepot" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "org.mariadb.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "orion_DW_user";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[6SwFmfeYG+t91YjzTPv5GQ==]");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
            try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
            }

				String insert_tDBOutput_1 = "INSERT INTO `" + "Geography_Dim" + "` (`Street_ID`,`Continent`,`Country`,`State_Code`,`State`,`Region`,`Province`,`County`,`City`,`Postal_Code`,`Street_Name`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("street_code"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countyStruct> tHash_Lookup_county = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countyStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countyStruct>) 
					globalMap.get( "tHash_Lookup_county" ))
					;					
					
	

countyStruct countyHashKey = new countyStruct();
countyStruct countyDefault = new countyStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stateStruct> tHash_Lookup_state = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stateStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stateStruct>) 
					globalMap.get( "tHash_Lookup_state" ))
					;					
					
	

stateStruct stateHashKey = new stateStruct();
stateStruct stateDefault = new stateStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countryStruct> tHash_Lookup_country = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countryStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countryStruct>) 
					globalMap.get( "tHash_Lookup_country" ))
					;					
					
	

countryStruct countryHashKey = new countryStruct();
countryStruct countryDefault = new countryStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<continentStruct> tHash_Lookup_continent = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<continentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<continentStruct>) 
					globalMap.get( "tHash_Lookup_continent" ))
					;					
					
	

continentStruct continentHashKey = new continentStruct();
continentStruct continentDefault = new continentStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
geography_dimStruct geography_dim_tmp = new geography_dimStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
			String driverClass_tDBInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_1);
			
			String url_tDBInput_1 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_1 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
	        
			String atnParams_tDBInput_1 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_1 = atnParams_tDBInput_1.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_1 = new java.util.Properties();
			atnParamsPrope_tDBInput_1.put("user",dbUser_tDBInput_1);
			atnParamsPrope_tDBInput_1.put("password",dbPwd_tDBInput_1);
			atnParamsPrope_tDBInput_1.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_1.getBytes()));
			conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, atnParamsPrope_tDBInput_1);
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  STREET_CODE.STREET_ID, \n  STREET_CODE.COUNTRY, \n  STREET_CODE.STREET_NAME, \n  STREET_CODE.CITY_ID, \n  STREET_"
+"CODE.POSTAL_CODE, \n  STREET_CODE.FROM_STREET_NUM, \n  STREET_CODE.TO_STREET_NUM, \n  STREET_CODE.CITY_NAME, \n  STREET_CODE"
+".[COUNT], \n  STREET_CODE.COUNTY_ID, \n  STREET_CODE.POSTAL_CODE_ID\nFROM STREET_CODE";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								street_code.STREET_ID = null;
							} else {
	                         		
            street_code.STREET_ID = rs_tDBInput_1.getDouble(1);
            if(rs_tDBInput_1.wasNull()){
                    street_code.STREET_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								street_code.COUNTRY = null;
							} else {
	                         		
        	street_code.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								street_code.STREET_NAME = null;
							} else {
	                         		
        	street_code.STREET_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								street_code.CITY_ID = null;
							} else {
	                         		
            street_code.CITY_ID = rs_tDBInput_1.getDouble(4);
            if(rs_tDBInput_1.wasNull()){
                    street_code.CITY_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								street_code.POSTAL_CODE = null;
							} else {
	                         		
        	street_code.POSTAL_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								street_code.FROM_STREET_NUM = null;
							} else {
	                         		
            street_code.FROM_STREET_NUM = rs_tDBInput_1.getDouble(6);
            if(rs_tDBInput_1.wasNull()){
                    street_code.FROM_STREET_NUM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								street_code.TO_STREET_NUM = null;
							} else {
	                         		
            street_code.TO_STREET_NUM = rs_tDBInput_1.getDouble(7);
            if(rs_tDBInput_1.wasNull()){
                    street_code.TO_STREET_NUM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								street_code.CITY_NAME = null;
							} else {
	                         		
        	street_code.CITY_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								street_code.COUNT = null;
							} else {
	                         		
            street_code.COUNT = rs_tDBInput_1.getDouble(9);
            if(rs_tDBInput_1.wasNull()){
                    street_code.COUNT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								street_code.COUNTY_ID = null;
							} else {
	                         		
            street_code.COUNTY_ID = rs_tDBInput_1.getDouble(10);
            if(rs_tDBInput_1.wasNull()){
                    street_code.COUNTY_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								street_code.POSTAL_CODE_ID = null;
							} else {
	                         		
            street_code.POSTAL_CODE_ID = rs_tDBInput_1.getDouble(11);
            if(rs_tDBInput_1.wasNull()){
                    street_code.POSTAL_CODE_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//street_code
			//street_code


			
				
				if(execStat){
					runStat.updateStatOnConnection("street_code"+iterateId,1, 1);
				}
				
				
				
			

		

			


		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "county" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcounty = false;
       		  	    	
       		  	    	
 							countyStruct countyObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		countyHashKey.COUNTY_ID = street_code.COUNTY_ID ;
                        		    		

								
		                        	countyHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_county.lookup( countyHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_county != null && tHash_Lookup_county.getCount(countyHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'county' and it contains more one result from keys :  county.COUNTY_ID = '" + countyHashKey.COUNTY_ID + "'");
								} // G 071
							

							countyStruct county = null;
                    		  	 
							   
                    		  	 
	       		  	    	countyStruct fromLookup_county = null;
							county = countyDefault;
										 
							
								 
							
							
								if (tHash_Lookup_county !=null && tHash_Lookup_county.hasNext()) { // G 099
								
							
								
								fromLookup_county = tHash_Lookup_county.next();

							
							
								} // G 099
							
							

							if(fromLookup_county != null) {
								county = fromLookup_county;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "state" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstate = false;
       		  	    	
       		  	    	
 							stateStruct stateObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		stateHashKey.STATE_ID = county.STATE_ID ;
                        		    		

								
		                        	stateHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_state.lookup( stateHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_state != null && tHash_Lookup_state.getCount(stateHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'state' and it contains more one result from keys :  state.STATE_ID = '" + stateHashKey.STATE_ID + "'");
								} // G 071
							

							stateStruct state = null;
                    		  	 
							   
                    		  	 
	       		  	    	stateStruct fromLookup_state = null;
							state = stateDefault;
										 
							
								 
							
							
								if (tHash_Lookup_state !=null && tHash_Lookup_state.hasNext()) { // G 099
								
							
								
								fromLookup_state = tHash_Lookup_state.next();

							
							
								} // G 099
							
							

							if(fromLookup_state != null) {
								state = fromLookup_state;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "country" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcountry = false;
       		  	    	
       		  	    	
 							countryStruct countryObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		countryHashKey.COUNTRY = state.COUNTRY ;
                        		    		

								
		                        	countryHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_country.lookup( countryHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_country != null && tHash_Lookup_country.getCount(countryHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'country' and it contains more one result from keys :  country.COUNTRY = '" + countryHashKey.COUNTRY + "'");
								} // G 071
							

							countryStruct country = null;
                    		  	 
							   
                    		  	 
	       		  	    	countryStruct fromLookup_country = null;
							country = countryDefault;
										 
							
								 
							
							
								if (tHash_Lookup_country !=null && tHash_Lookup_country.hasNext()) { // G 099
								
							
								
								fromLookup_country = tHash_Lookup_country.next();

							
							
								} // G 099
							
							

							if(fromLookup_country != null) {
								country = fromLookup_country;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "continent" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcontinent = false;
       		  	    	
       		  	    	
 							continentStruct continentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		continentHashKey.CONTINENT_ID = country.CONTINENT_ID ;
                        		    		

								
		                        	continentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_continent.lookup( continentHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_continent != null && tHash_Lookup_continent.getCount(continentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'continent' and it contains more one result from keys :  continent.CONTINENT_ID = '" + continentHashKey.CONTINENT_ID + "'");
								} // G 071
							

							continentStruct continent = null;
                    		  	 
							   
                    		  	 
	       		  	    	continentStruct fromLookup_continent = null;
							continent = continentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_continent !=null && tHash_Lookup_continent.hasNext()) { // G 099
								
							
								
								fromLookup_continent = tHash_Lookup_continent.next();

							
							
								} // G 099
							
							

							if(fromLookup_continent != null) {
								continent = fromLookup_continent;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

geography_dim = null;


// # Output table : 'geography_dim'
geography_dim_tmp.Street_ID = street_code.STREET_ID ;
geography_dim_tmp.Continent = continent.CONTINENT_NAME ;
geography_dim_tmp.Country = country.COUNTRY ;
geography_dim_tmp.State_Code = state.STATE_CODE ;
geography_dim_tmp.State = state.STATE_NAME ;
geography_dim_tmp.Region = county.REGION_NAME ;
geography_dim_tmp.Province = county.PROVINCE_NAME ;
geography_dim_tmp.County = county.COUNTY_NAME ;
geography_dim_tmp.City = street_code.CITY_NAME ;
geography_dim_tmp.Postal_Code = street_code.POSTAL_CODE ;
geography_dim_tmp.Street_Name = street_code.STREET_NAME ;
geography_dim = geography_dim_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "geography_dim"
if(geography_dim != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//geography_dim
			//geography_dim


			
				
				if(execStat){
					runStat.updateStatOnConnection("geography_dim"+iterateId,1, 1);
				}
				
				
				
			

		



        whetherReject_tDBOutput_1 = false;
                            pstmt_tDBOutput_1.setDouble(1, geography_dim.Street_ID);

                            if(geography_dim.Continent == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, geography_dim.Continent);
}

                            if(geography_dim.Country == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, geography_dim.Country);
}

                            if(geography_dim.State_Code == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, geography_dim.State_Code);
}

                            if(geography_dim.State == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, geography_dim.State);
}

                            if(geography_dim.Region == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, geography_dim.Region);
}

                            if(geography_dim.Province == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, geography_dim.Province);
}

                            if(geography_dim.County == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, geography_dim.County);
}

                            if(geography_dim.City == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, geography_dim.City);
}

                            if(geography_dim.Postal_Code == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, geography_dim.Postal_Code);
}

                            if(geography_dim.Street_Name == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, geography_dim.Street_Name);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "geography_dim"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_county != null) {
						tHash_Lookup_county.endGet();
					}
					globalMap.remove( "tHash_Lookup_county" );

					
					
				
					if(tHash_Lookup_state != null) {
						tHash_Lookup_state.endGet();
					}
					globalMap.remove( "tHash_Lookup_state" );

					
					
				
					if(tHash_Lookup_country != null) {
						tHash_Lookup_country.endGet();
					}
					globalMap.remove( "tHash_Lookup_country" );

					
					
				
					if(tHash_Lookup_continent != null) {
						tHash_Lookup_continent.endGet();
					}
					globalMap.remove( "tHash_Lookup_continent" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("street_code"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("geography_dim"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_county"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_state"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_country"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_continent"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class countyStruct implements routines.system.IPersistableComparableLookupRow<countyStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double COUNTY_ID;

				public Double getCOUNTY_ID () {
					return this.COUNTY_ID;
				}
				
			    public Double COUNTY_TYPE;

				public Double getCOUNTY_TYPE () {
					return this.COUNTY_TYPE;
				}
				
			    public String COUNTY_NAME;

				public String getCOUNTY_NAME () {
					return this.COUNTY_NAME;
				}
				
			    public Double PROVINCE_TYPE;

				public Double getPROVINCE_TYPE () {
					return this.PROVINCE_TYPE;
				}
				
			    public String PROVINCE_NAME;

				public String getPROVINCE_NAME () {
					return this.PROVINCE_NAME;
				}
				
			    public String REGION_NAME;

				public String getREGION_NAME () {
					return this.REGION_NAME;
				}
				
			    public Double REGION_TYPE;

				public Double getREGION_TYPE () {
					return this.REGION_TYPE;
				}
				
			    public Double STATE_ID;

				public Double getSTATE_ID () {
					return this.STATE_ID;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COUNTY_ID == null) ? 0 : this.COUNTY_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final countyStruct other = (countyStruct) obj;
		
						if (this.COUNTY_ID == null) {
							if (other.COUNTY_ID != null)
								return false;
						
						} else if (!this.COUNTY_ID.equals(other.COUNTY_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(countyStruct other) {

		other.COUNTY_ID = this.COUNTY_ID;
	            other.COUNTY_TYPE = this.COUNTY_TYPE;
	            other.COUNTY_NAME = this.COUNTY_NAME;
	            other.PROVINCE_TYPE = this.PROVINCE_TYPE;
	            other.PROVINCE_NAME = this.PROVINCE_NAME;
	            other.REGION_NAME = this.REGION_NAME;
	            other.REGION_TYPE = this.REGION_TYPE;
	            other.STATE_ID = this.STATE_ID;
	            other.COUNTRY = this.COUNTRY;
	            
	}

	public void copyKeysDataTo(countyStruct other) {

		other.COUNTY_ID = this.COUNTY_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNTY_ID = null;
           				} else {
           			    	this.COUNTY_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.COUNTY_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNTY_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNTY_TYPE = null;
           				} else {
           			    	this.COUNTY_TYPE = dis.readDouble();
           				}
					
						this.COUNTY_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PROVINCE_TYPE = null;
           				} else {
           			    	this.PROVINCE_TYPE = dis.readDouble();
           				}
					
						this.PROVINCE_NAME = readString(dis,ois);
					
						this.REGION_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REGION_TYPE = null;
           				} else {
           			    	this.REGION_TYPE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.STATE_ID = null;
           				} else {
           			    	this.STATE_ID = dis.readDouble();
           				}
					
						this.COUNTRY = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.COUNTY_TYPE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNTY_TYPE);
		            	}
					
						writeString(this.COUNTY_NAME, dos, oos);
					
						if(this.PROVINCE_TYPE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PROVINCE_TYPE);
		            	}
					
						writeString(this.PROVINCE_NAME, dos, oos);
					
						writeString(this.REGION_NAME, dos, oos);
					
						if(this.REGION_TYPE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REGION_TYPE);
		            	}
					
						if(this.STATE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.STATE_ID);
		            	}
					
						writeString(this.COUNTRY, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNTY_ID="+String.valueOf(COUNTY_ID));
		sb.append(",COUNTY_TYPE="+String.valueOf(COUNTY_TYPE));
		sb.append(",COUNTY_NAME="+COUNTY_NAME);
		sb.append(",PROVINCE_TYPE="+String.valueOf(PROVINCE_TYPE));
		sb.append(",PROVINCE_NAME="+PROVINCE_NAME);
		sb.append(",REGION_NAME="+REGION_NAME);
		sb.append(",REGION_TYPE="+String.valueOf(REGION_TYPE));
		sb.append(",STATE_ID="+String.valueOf(STATE_ID));
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(countyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COUNTY_ID, other.COUNTY_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		countyStruct county = new countyStruct();




	
	/**
	 * [tAdvancedHash_county begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_county", false);
		start_Hash.put("tAdvancedHash_county", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_county";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("county"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_county = 0;
		

			   		// connection name:county
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(county,county) | target node:tAdvancedHash_county - inputs:(county) outputs:()
			   		// linked node: tMap_1 - inputs:(street_code,county,state,country,continent) outputs:(geography_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_county = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countyStruct> tHash_Lookup_county =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<countyStruct>getLookup(matchingModeEnum_county);
	   						   
		   	   	   globalMap.put("tHash_Lookup_county", tHash_Lookup_county);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_county begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
			String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_2);
			
			String url_tDBInput_2 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_2 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
	        
			String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
			atnParamsPrope_tDBInput_2.put("user",dbUser_tDBInput_2);
			atnParamsPrope_tDBInput_2.put("password",dbPwd_tDBInput_2);
			atnParamsPrope_tDBInput_2.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_2.getBytes()));
			conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, atnParamsPrope_tDBInput_2);
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  COUNTY.COUNTY_ID, \n  COUNTY.COUNTY_TYPE, \n  COUNTY.COUNTY_NAME, \n  COUNTY.PROVINCE_TYPE, \n  COUNTY.PROVINCE_N"
+"AME, \n  COUNTY.REGION_NAME, \n  COUNTY.REGION_TYPE, \n  COUNTY.STATE_ID, \n  COUNTY.COUNTRY\nFROM COUNTY";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								county.COUNTY_ID = null;
							} else {
	                         		
            county.COUNTY_ID = rs_tDBInput_2.getDouble(1);
            if(rs_tDBInput_2.wasNull()){
                    county.COUNTY_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								county.COUNTY_TYPE = null;
							} else {
	                         		
            county.COUNTY_TYPE = rs_tDBInput_2.getDouble(2);
            if(rs_tDBInput_2.wasNull()){
                    county.COUNTY_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								county.COUNTY_NAME = null;
							} else {
	                         		
        	county.COUNTY_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								county.PROVINCE_TYPE = null;
							} else {
	                         		
            county.PROVINCE_TYPE = rs_tDBInput_2.getDouble(4);
            if(rs_tDBInput_2.wasNull()){
                    county.PROVINCE_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								county.PROVINCE_NAME = null;
							} else {
	                         		
        	county.PROVINCE_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								county.REGION_NAME = null;
							} else {
	                         		
        	county.REGION_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								county.REGION_TYPE = null;
							} else {
	                         		
            county.REGION_TYPE = rs_tDBInput_2.getDouble(7);
            if(rs_tDBInput_2.wasNull()){
                    county.REGION_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								county.STATE_ID = null;
							} else {
	                         		
            county.STATE_ID = rs_tDBInput_2.getDouble(8);
            if(rs_tDBInput_2.wasNull()){
                    county.STATE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								county.COUNTRY = null;
							} else {
	                         		
        	county.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_county main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_county";

	

			//county
			//county


			
				
				if(execStat){
					runStat.updateStatOnConnection("county"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					countyStruct county_HashRow = new countyStruct();
		   	   	   
				
				county_HashRow.COUNTY_ID = county.COUNTY_ID;
				
				county_HashRow.COUNTY_TYPE = county.COUNTY_TYPE;
				
				county_HashRow.COUNTY_NAME = county.COUNTY_NAME;
				
				county_HashRow.PROVINCE_TYPE = county.PROVINCE_TYPE;
				
				county_HashRow.PROVINCE_NAME = county.PROVINCE_NAME;
				
				county_HashRow.REGION_NAME = county.REGION_NAME;
				
				county_HashRow.REGION_TYPE = county.REGION_TYPE;
				
				county_HashRow.STATE_ID = county.STATE_ID;
				
				county_HashRow.COUNTRY = county.COUNTRY;
				
			tHash_Lookup_county.put(county_HashRow);
			
            




 


	tos_count_tAdvancedHash_county++;

/**
 * [tAdvancedHash_county main ] stop
 */
	
	/**
	 * [tAdvancedHash_county process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_county";

	

 



/**
 * [tAdvancedHash_county process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_county process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_county";

	

 



/**
 * [tAdvancedHash_county process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_county end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_county";

	

tHash_Lookup_county.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("county"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_county", true);
end_Hash.put("tAdvancedHash_county", System.currentTimeMillis());




/**
 * [tAdvancedHash_county end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_county finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_county";

	

 



/**
 * [tAdvancedHash_county finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class stateStruct implements routines.system.IPersistableComparableLookupRow<stateStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double STATE_ID;

				public Double getSTATE_ID () {
					return this.STATE_ID;
				}
				
			    public Double STATE_TYPE;

				public Double getSTATE_TYPE () {
					return this.STATE_TYPE;
				}
				
			    public String STATE_CODE;

				public String getSTATE_CODE () {
					return this.STATE_CODE;
				}
				
			    public String STATE_NAME;

				public String getSTATE_NAME () {
					return this.STATE_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.STATE_ID == null) ? 0 : this.STATE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final stateStruct other = (stateStruct) obj;
		
						if (this.STATE_ID == null) {
							if (other.STATE_ID != null)
								return false;
						
						} else if (!this.STATE_ID.equals(other.STATE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(stateStruct other) {

		other.STATE_ID = this.STATE_ID;
	            other.STATE_TYPE = this.STATE_TYPE;
	            other.STATE_CODE = this.STATE_CODE;
	            other.STATE_NAME = this.STATE_NAME;
	            other.COUNTRY = this.COUNTRY;
	            
	}

	public void copyKeysDataTo(stateStruct other) {

		other.STATE_ID = this.STATE_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.STATE_ID = null;
           				} else {
           			    	this.STATE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.STATE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.STATE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.STATE_TYPE = null;
           				} else {
           			    	this.STATE_TYPE = dis.readDouble();
           				}
					
						this.STATE_CODE = readString(dis,ois);
					
						this.STATE_NAME = readString(dis,ois);
					
						this.COUNTRY = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.STATE_TYPE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.STATE_TYPE);
		            	}
					
						writeString(this.STATE_CODE, dos, oos);
					
						writeString(this.STATE_NAME, dos, oos);
					
						writeString(this.COUNTRY, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("STATE_ID="+String.valueOf(STATE_ID));
		sb.append(",STATE_TYPE="+String.valueOf(STATE_TYPE));
		sb.append(",STATE_CODE="+STATE_CODE);
		sb.append(",STATE_NAME="+STATE_NAME);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.STATE_ID, other.STATE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		stateStruct state = new stateStruct();




	
	/**
	 * [tAdvancedHash_state begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_state", false);
		start_Hash.put("tAdvancedHash_state", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_state";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("state"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_state = 0;
		

			   		// connection name:state
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(state,state) | target node:tAdvancedHash_state - inputs:(state) outputs:()
			   		// linked node: tMap_1 - inputs:(street_code,county,state,country,continent) outputs:(geography_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_state = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<stateStruct> tHash_Lookup_state =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<stateStruct>getLookup(matchingModeEnum_state);
	   						   
		   	   	   globalMap.put("tHash_Lookup_state", tHash_Lookup_state);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_state begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
			String driverClass_tDBInput_3 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_3);
			
			String url_tDBInput_3 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_3 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
	        
			String atnParams_tDBInput_3 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_3 = atnParams_tDBInput_3.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_3 = new java.util.Properties();
			atnParamsPrope_tDBInput_3.put("user",dbUser_tDBInput_3);
			atnParamsPrope_tDBInput_3.put("password",dbPwd_tDBInput_3);
			atnParamsPrope_tDBInput_3.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_3.getBytes()));
			conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, atnParamsPrope_tDBInput_3);
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  STATE.STATE_ID, \n  STATE.STATE_TYPE, \n  STATE.STATE_CODE, \n  STATE.STATE_NAME, \n  STATE.COUNTRY\nFROM STATE";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								state.STATE_ID = null;
							} else {
	                         		
            state.STATE_ID = rs_tDBInput_3.getDouble(1);
            if(rs_tDBInput_3.wasNull()){
                    state.STATE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								state.STATE_TYPE = null;
							} else {
	                         		
            state.STATE_TYPE = rs_tDBInput_3.getDouble(2);
            if(rs_tDBInput_3.wasNull()){
                    state.STATE_TYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								state.STATE_CODE = null;
							} else {
	                         		
        	state.STATE_CODE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								state.STATE_NAME = null;
							} else {
	                         		
        	state.STATE_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								state.COUNTRY = null;
							} else {
	                         		
        	state.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_state main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_state";

	

			//state
			//state


			
				
				if(execStat){
					runStat.updateStatOnConnection("state"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					stateStruct state_HashRow = new stateStruct();
		   	   	   
				
				state_HashRow.STATE_ID = state.STATE_ID;
				
				state_HashRow.STATE_TYPE = state.STATE_TYPE;
				
				state_HashRow.STATE_CODE = state.STATE_CODE;
				
				state_HashRow.STATE_NAME = state.STATE_NAME;
				
				state_HashRow.COUNTRY = state.COUNTRY;
				
			tHash_Lookup_state.put(state_HashRow);
			
            




 


	tos_count_tAdvancedHash_state++;

/**
 * [tAdvancedHash_state main ] stop
 */
	
	/**
	 * [tAdvancedHash_state process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_state";

	

 



/**
 * [tAdvancedHash_state process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_state process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_state";

	

 



/**
 * [tAdvancedHash_state process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_state end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_state";

	

tHash_Lookup_state.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("state"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_state", true);
end_Hash.put("tAdvancedHash_state", System.currentTimeMillis());




/**
 * [tAdvancedHash_state end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_state finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_state";

	

 



/**
 * [tAdvancedHash_state finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class countryStruct implements routines.system.IPersistableComparableLookupRow<countryStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String COUNTRY_NAME;

				public String getCOUNTRY_NAME () {
					return this.COUNTRY_NAME;
				}
				
			    public Double POPULATION;

				public Double getPOPULATION () {
					return this.POPULATION;
				}
				
			    public Double COUNTRY_ID;

				public Double getCOUNTRY_ID () {
					return this.COUNTRY_ID;
				}
				
			    public Double CONTINENT_ID;

				public Double getCONTINENT_ID () {
					return this.CONTINENT_ID;
				}
				
			    public String COUNTRY_FORMERNAME;

				public String getCOUNTRY_FORMERNAME () {
					return this.COUNTRY_FORMERNAME;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COUNTRY == null) ? 0 : this.COUNTRY.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final countryStruct other = (countryStruct) obj;
		
						if (this.COUNTRY == null) {
							if (other.COUNTRY != null)
								return false;
						
						} else if (!this.COUNTRY.equals(other.COUNTRY))
						
							return false;
					

		return true;
    }

	public void copyDataTo(countryStruct other) {

		other.COUNTRY = this.COUNTRY;
	            other.COUNTRY_NAME = this.COUNTRY_NAME;
	            other.POPULATION = this.POPULATION;
	            other.COUNTRY_ID = this.COUNTRY_ID;
	            other.CONTINENT_ID = this.CONTINENT_ID;
	            other.COUNTRY_FORMERNAME = this.COUNTRY_FORMERNAME;
	            
	}

	public void copyKeysDataTo(countryStruct other) {

		other.COUNTRY = this.COUNTRY;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job04_Geography_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job04_Geography_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.COUNTRY_NAME = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.POPULATION = null;
           				} else {
           			    	this.POPULATION = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.COUNTRY_ID = null;
           				} else {
           			    	this.COUNTRY_ID = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONTINENT_ID = null;
           				} else {
           			    	this.CONTINENT_ID = dis.readDouble();
           				}
					
						this.COUNTRY_FORMERNAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.COUNTRY_NAME, dos, oos);
					
						if(this.POPULATION == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.POPULATION);
		            	}
					
						if(this.COUNTRY_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.COUNTRY_ID);
		            	}
					
						if(this.CONTINENT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONTINENT_ID);
		            	}
					
						writeString(this.COUNTRY_FORMERNAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNTRY="+COUNTRY);
		sb.append(",COUNTRY_NAME="+COUNTRY_NAME);
		sb.append(",POPULATION="+String.valueOf(POPULATION));
		sb.append(",COUNTRY_ID="+String.valueOf(COUNTRY_ID));
		sb.append(",CONTINENT_ID="+String.valueOf(CONTINENT_ID));
		sb.append(",COUNTRY_FORMERNAME="+COUNTRY_FORMERNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(countryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COUNTRY, other.COUNTRY);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		countryStruct country = new countryStruct();




	
	/**
	 * [tAdvancedHash_country begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_country", false);
		start_Hash.put("tAdvancedHash_country", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_country";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("country"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_country = 0;
		

			   		// connection name:country
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(country,country) | target node:tAdvancedHash_country - inputs:(country) outputs:()
			   		// linked node: tMap_1 - inputs:(street_code,county,state,country,continent) outputs:(geography_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_country = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<countryStruct> tHash_Lookup_country =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<countryStruct>getLookup(matchingModeEnum_country);
	   						   
		   	   	   globalMap.put("tHash_Lookup_country", tHash_Lookup_country);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_country begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
			String driverClass_tDBInput_4 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_4);
			
			String url_tDBInput_4 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_4 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
	        
			String atnParams_tDBInput_4 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_4 = atnParams_tDBInput_4.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_4 = new java.util.Properties();
			atnParamsPrope_tDBInput_4.put("user",dbUser_tDBInput_4);
			atnParamsPrope_tDBInput_4.put("password",dbPwd_tDBInput_4);
			atnParamsPrope_tDBInput_4.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_4.getBytes()));
			conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, atnParamsPrope_tDBInput_4);
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  COUNTRY.COUNTRY, \n  COUNTRY.COUNTRY_NAME, \n  COUNTRY.POPULATION, \n  COUNTRY.COUNTRY_ID, \n  COUNTRY.CONTINENT_"
+"ID, \n  COUNTRY.COUNTRY_FORMERNAME\nFROM COUNTRY";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								country.COUNTRY = null;
							} else {
	                         		
        	country.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								country.COUNTRY_NAME = null;
							} else {
	                         		
        	country.COUNTRY_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								country.POPULATION = null;
							} else {
	                         		
            country.POPULATION = rs_tDBInput_4.getDouble(3);
            if(rs_tDBInput_4.wasNull()){
                    country.POPULATION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								country.COUNTRY_ID = null;
							} else {
	                         		
            country.COUNTRY_ID = rs_tDBInput_4.getDouble(4);
            if(rs_tDBInput_4.wasNull()){
                    country.COUNTRY_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								country.CONTINENT_ID = null;
							} else {
	                         		
            country.CONTINENT_ID = rs_tDBInput_4.getDouble(5);
            if(rs_tDBInput_4.wasNull()){
                    country.CONTINENT_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								country.COUNTRY_FORMERNAME = null;
							} else {
	                         		
        	country.COUNTRY_FORMERNAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_country main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_country";

	

			//country
			//country


			
				
				if(execStat){
					runStat.updateStatOnConnection("country"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					countryStruct country_HashRow = new countryStruct();
		   	   	   
				
				country_HashRow.COUNTRY = country.COUNTRY;
				
				country_HashRow.COUNTRY_NAME = country.COUNTRY_NAME;
				
				country_HashRow.POPULATION = country.POPULATION;
				
				country_HashRow.COUNTRY_ID = country.COUNTRY_ID;
				
				country_HashRow.CONTINENT_ID = country.CONTINENT_ID;
				
				country_HashRow.COUNTRY_FORMERNAME = country.COUNTRY_FORMERNAME;
				
			tHash_Lookup_country.put(country_HashRow);
			
            




 


	tos_count_tAdvancedHash_country++;

/**
 * [tAdvancedHash_country main ] stop
 */
	
	/**
	 * [tAdvancedHash_country process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_country";

	

 



/**
 * [tAdvancedHash_country process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_country process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_country";

	

 



/**
 * [tAdvancedHash_country process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_country end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_country";

	

tHash_Lookup_country.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("country"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_country", true);
end_Hash.put("tAdvancedHash_country", System.currentTimeMillis());




/**
 * [tAdvancedHash_country end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_country finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_country";

	

 



/**
 * [tAdvancedHash_country finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class continentStruct implements routines.system.IPersistableComparableLookupRow<continentStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job04_Geography_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double CONTINENT_ID;

				public Double getCONTINENT_ID () {
					return this.CONTINENT_ID;
				}
				
			    public String CONTINENT_NAME;

				public String getCONTINENT_NAME () {
					return this.CONTINENT_NAME;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONTINENT_ID == null) ? 0 : this.CONTINENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final continentStruct other = (continentStruct) obj;
		
						if (this.CONTINENT_ID == null) {
							if (other.CONTINENT_ID != null)
								return false;
						
						} else if (!this.CONTINENT_ID.equals(other.CONTINENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(continentStruct other) {

		other.CONTINENT_ID = this.CONTINENT_ID;
	            other.CONTINENT_NAME = this.CONTINENT_NAME;
	            
	}

	public void copyKeysDataTo(continentStruct other) {

		other.CONTINENT_ID = this.CONTINENT_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job04_Geography_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONTINENT_ID = null;
           				} else {
           			    	this.CONTINENT_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.CONTINENT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONTINENT_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CONTINENT_NAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CONTINENT_NAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONTINENT_ID="+String.valueOf(CONTINENT_ID));
		sb.append(",CONTINENT_NAME="+CONTINENT_NAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(continentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONTINENT_ID, other.CONTINENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		continentStruct continent = new continentStruct();




	
	/**
	 * [tAdvancedHash_continent begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_continent", false);
		start_Hash.put("tAdvancedHash_continent", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_continent";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("continent"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_continent = 0;
		

			   		// connection name:continent
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(continent,continent) | target node:tAdvancedHash_continent - inputs:(continent) outputs:()
			   		// linked node: tMap_1 - inputs:(street_code,county,state,country,continent) outputs:(geography_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_continent = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<continentStruct> tHash_Lookup_continent =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<continentStruct>getLookup(matchingModeEnum_continent);
	   						   
		   	   	   globalMap.put("tHash_Lookup_continent", tHash_Lookup_continent);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_continent begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
			String driverClass_tDBInput_5 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_5);
			
			String url_tDBInput_5 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_5 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
	        
			String atnParams_tDBInput_5 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_5 = atnParams_tDBInput_5.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_5 = new java.util.Properties();
			atnParamsPrope_tDBInput_5.put("user",dbUser_tDBInput_5);
			atnParamsPrope_tDBInput_5.put("password",dbPwd_tDBInput_5);
			atnParamsPrope_tDBInput_5.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_5.getBytes()));
			conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, atnParamsPrope_tDBInput_5);
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  CONTINENT.CONTINENT_ID, \n  CONTINENT.CONTINENT_NAME\nFROM CONTINENT";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								continent.CONTINENT_ID = null;
							} else {
	                         		
            continent.CONTINENT_ID = rs_tDBInput_5.getDouble(1);
            if(rs_tDBInput_5.wasNull()){
                    continent.CONTINENT_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								continent.CONTINENT_NAME = null;
							} else {
	                         		
        	continent.CONTINENT_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_continent main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_continent";

	

			//continent
			//continent


			
				
				if(execStat){
					runStat.updateStatOnConnection("continent"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					continentStruct continent_HashRow = new continentStruct();
		   	   	   
				
				continent_HashRow.CONTINENT_ID = continent.CONTINENT_ID;
				
				continent_HashRow.CONTINENT_NAME = continent.CONTINENT_NAME;
				
			tHash_Lookup_continent.put(continent_HashRow);
			
            




 


	tos_count_tAdvancedHash_continent++;

/**
 * [tAdvancedHash_continent main ] stop
 */
	
	/**
	 * [tAdvancedHash_continent process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_continent";

	

 



/**
 * [tAdvancedHash_continent process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_continent process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_continent";

	

 



/**
 * [tAdvancedHash_continent process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_continent end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_continent";

	

tHash_Lookup_continent.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("continent"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_continent", true);
end_Hash.put("tAdvancedHash_continent", System.currentTimeMillis());




/**
 * [tAdvancedHash_continent end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_continent finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_continent";

	

 



/**
 * [tAdvancedHash_continent finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Job04_Geography_Dim Job04_Geography_DimClass = new Job04_Geography_Dim();

        int exitCode = Job04_Geography_DimClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Job04_Geography_Dim.class.getClassLoader().getResourceAsStream("orion_project/job04_geography_dim_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Job04_Geography_Dim.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job04_Geography_Dim");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     150269 characters generated by Talend Open Studio for Data Integration 
 *     on the December 20, 2019 at 9:46:50 PM SAST
 ************************************************************************************************/