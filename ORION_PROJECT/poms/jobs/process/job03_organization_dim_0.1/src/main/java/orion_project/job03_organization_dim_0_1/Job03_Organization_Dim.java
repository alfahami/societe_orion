// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package orion_project.job03_organization_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendStringUtil;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Job03_Organization_Dim Purpose: filling Organization_Dim table<br>
 * Description:  <br>
 * @author toihir.alfahami@uit.ac.ma
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class Job03_Organization_Dim implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Job03_Organization_Dim";
	private final String projectName = "ORION_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Job03_Organization_Dim.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Job03_Organization_Dim.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_group_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_section_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_department_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_company_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_staff_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class organization_dimStruct implements routines.system.IPersistableRow<organization_dimStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public double Employee_ID;

				public double getEmployee_ID () {
					return this.Employee_ID;
				}
				
			    public String Employee_Country;

				public String getEmployee_Country () {
					return this.Employee_Country;
				}
				
			    public String Company;

				public String getCompany () {
					return this.Company;
				}
				
			    public String Department;

				public String getDepartment () {
					return this.Department;
				}
				
			    public String Section;

				public String getSection () {
					return this.Section;
				}
				
			    public String Org_Group;

				public String getOrg_Group () {
					return this.Org_Group;
				}
				
			    public String Job_Title;

				public String getJob_Title () {
					return this.Job_Title;
				}
				
			    public String Employee_Name;

				public String getEmployee_Name () {
					return this.Employee_Name;
				}
				
			    public String Employee_Gender;

				public String getEmployee_Gender () {
					return this.Employee_Gender;
				}
				
			    public Double Salary;

				public Double getSalary () {
					return this.Salary;
				}
				
			    public java.util.Date Employee_Birth_Date;

				public java.util.Date getEmployee_Birth_Date () {
					return this.Employee_Birth_Date;
				}
				
			    public java.util.Date Employee_Hire_Date;

				public java.util.Date getEmployee_Hire_Date () {
					return this.Employee_Hire_Date;
				}
				
			    public java.util.Date Employee_Term_Date;

				public java.util.Date getEmployee_Term_Date () {
					return this.Employee_Term_Date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.Employee_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final organization_dimStruct other = (organization_dimStruct) obj;
		
						if (this.Employee_ID != other.Employee_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(organization_dimStruct other) {

		other.Employee_ID = this.Employee_ID;
	            other.Employee_Country = this.Employee_Country;
	            other.Company = this.Company;
	            other.Department = this.Department;
	            other.Section = this.Section;
	            other.Org_Group = this.Org_Group;
	            other.Job_Title = this.Job_Title;
	            other.Employee_Name = this.Employee_Name;
	            other.Employee_Gender = this.Employee_Gender;
	            other.Salary = this.Salary;
	            other.Employee_Birth_Date = this.Employee_Birth_Date;
	            other.Employee_Hire_Date = this.Employee_Hire_Date;
	            other.Employee_Term_Date = this.Employee_Term_Date;
	            
	}

	public void copyKeysDataTo(organization_dimStruct other) {

		other.Employee_ID = this.Employee_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job03_Organization_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job03_Organization_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job03_Organization_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job03_Organization_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			        this.Employee_ID = dis.readDouble();
					
					this.Employee_Country = readString(dis);
					
					this.Company = readString(dis);
					
					this.Department = readString(dis);
					
					this.Section = readString(dis);
					
					this.Org_Group = readString(dis);
					
					this.Job_Title = readString(dis);
					
					this.Employee_Name = readString(dis);
					
					this.Employee_Gender = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Salary = null;
           				} else {
           			    	this.Salary = dis.readDouble();
           				}
					
					this.Employee_Birth_Date = readDate(dis);
					
					this.Employee_Hire_Date = readDate(dis);
					
					this.Employee_Term_Date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// double
				
		            	dos.writeDouble(this.Employee_ID);
					
					// String
				
						writeString(this.Employee_Country,dos);
					
					// String
				
						writeString(this.Company,dos);
					
					// String
				
						writeString(this.Department,dos);
					
					// String
				
						writeString(this.Section,dos);
					
					// String
				
						writeString(this.Org_Group,dos);
					
					// String
				
						writeString(this.Job_Title,dos);
					
					// String
				
						writeString(this.Employee_Name,dos);
					
					// String
				
						writeString(this.Employee_Gender,dos);
					
					// Double
				
						if(this.Salary == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Salary);
		            	}
					
					// java.util.Date
				
						writeDate(this.Employee_Birth_Date,dos);
					
					// java.util.Date
				
						writeDate(this.Employee_Hire_Date,dos);
					
					// java.util.Date
				
						writeDate(this.Employee_Term_Date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Employee_ID="+String.valueOf(Employee_ID));
		sb.append(",Employee_Country="+Employee_Country);
		sb.append(",Company="+Company);
		sb.append(",Department="+Department);
		sb.append(",Section="+Section);
		sb.append(",Org_Group="+Org_Group);
		sb.append(",Job_Title="+Job_Title);
		sb.append(",Employee_Name="+Employee_Name);
		sb.append(",Employee_Gender="+Employee_Gender);
		sb.append(",Salary="+String.valueOf(Salary));
		sb.append(",Employee_Birth_Date="+String.valueOf(Employee_Birth_Date));
		sb.append(",Employee_Hire_Date="+String.valueOf(Employee_Hire_Date));
		sb.append(",Employee_Term_Date="+String.valueOf(Employee_Term_Date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(organization_dimStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Employee_ID, other.Employee_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class employeeStruct implements routines.system.IPersistableRow<employeeStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];

	
			    public Double EMPLOYEE_ID;

				public Double getEMPLOYEE_ID () {
					return this.EMPLOYEE_ID;
				}
				
			    public String ORG_NAME;

				public String getORG_NAME () {
					return this.ORG_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public Double ORG_LEVEL;

				public Double getORG_LEVEL () {
					return this.ORG_LEVEL;
				}
				
			    public java.util.Date START_DATE;

				public java.util.Date getSTART_DATE () {
					return this.START_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public Double ORG_REF_ID;

				public Double getORG_REF_ID () {
					return this.ORG_REF_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job03_Organization_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job03_Organization_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job03_Organization_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job03_Organization_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EMPLOYEE_ID = null;
           				} else {
           			    	this.EMPLOYEE_ID = dis.readDouble();
           				}
					
					this.ORG_NAME = readString(dis);
					
					this.COUNTRY = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_LEVEL = null;
           				} else {
           			    	this.ORG_LEVEL = dis.readDouble();
           				}
					
					this.START_DATE = readDate(dis);
					
					this.END_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_REF_ID = null;
           				} else {
           			    	this.ORG_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.EMPLOYEE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EMPLOYEE_ID);
		            	}
					
					// String
				
						writeString(this.ORG_NAME,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// Double
				
						if(this.ORG_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_LEVEL);
		            	}
					
					// java.util.Date
				
						writeDate(this.START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.END_DATE,dos);
					
					// Double
				
						if(this.ORG_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPLOYEE_ID="+String.valueOf(EMPLOYEE_ID));
		sb.append(",ORG_NAME="+ORG_NAME);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",ORG_LEVEL="+String.valueOf(ORG_LEVEL));
		sb.append(",START_DATE="+String.valueOf(START_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",ORG_REF_ID="+String.valueOf(ORG_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(employeeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];

	
			    public Double EMPLOYEE_ID;

				public Double getEMPLOYEE_ID () {
					return this.EMPLOYEE_ID;
				}
				
			    public String ORG_NAME;

				public String getORG_NAME () {
					return this.ORG_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public Double ORG_LEVEL;

				public Double getORG_LEVEL () {
					return this.ORG_LEVEL;
				}
				
			    public java.util.Date START_DATE;

				public java.util.Date getSTART_DATE () {
					return this.START_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public Double ORG_REF_ID;

				public Double getORG_REF_ID () {
					return this.ORG_REF_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ORION_PROJECT_Job03_Organization_Dim.length) {
				if(length < 1024 && commonByteArray_ORION_PROJECT_Job03_Organization_Dim.length == 0) {
   					commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[1024];
				} else {
   					commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ORION_PROJECT_Job03_Organization_Dim, 0, length);
			strReturn = new String(commonByteArray_ORION_PROJECT_Job03_Organization_Dim, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EMPLOYEE_ID = null;
           				} else {
           			    	this.EMPLOYEE_ID = dis.readDouble();
           				}
					
					this.ORG_NAME = readString(dis);
					
					this.COUNTRY = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_LEVEL = null;
           				} else {
           			    	this.ORG_LEVEL = dis.readDouble();
           				}
					
					this.START_DATE = readDate(dis);
					
					this.END_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_REF_ID = null;
           				} else {
           			    	this.ORG_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.EMPLOYEE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EMPLOYEE_ID);
		            	}
					
					// String
				
						writeString(this.ORG_NAME,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// Double
				
						if(this.ORG_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_LEVEL);
		            	}
					
					// java.util.Date
				
						writeDate(this.START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.END_DATE,dos);
					
					// Double
				
						if(this.ORG_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPLOYEE_ID="+String.valueOf(EMPLOYEE_ID));
		sb.append(",ORG_NAME="+ORG_NAME);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",ORG_LEVEL="+String.valueOf(ORG_LEVEL));
		sb.append(",START_DATE="+String.valueOf(START_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",ORG_REF_ID="+String.valueOf(ORG_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_4Process(globalMap);
		tFileInputExcel_1Process(globalMap);

		employeeStruct employee = new employeeStruct();
organization_dimStruct organization_dim = new organization_dimStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("organization_dim"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "Organization_Dim";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "db_entrepot" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "noDatetimeStringSync=true";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mariadb://" + "localhost" + ":" + "3306" + "/" + "db_entrepot" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "org.mariadb.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "orion_DW_user";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[6SwFmfeYG+t91YjzTPv5GQ==]");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
            try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
            }

				String insert_tDBOutput_1 = "INSERT INTO `" + "Organization_Dim" + "` (`Employee_ID`,`Employee_Country`,`Company`,`Department`,`Section`,`Org_Group`,`Job_Title`,`Employee_Name`,`Employee_Gender`,`Salary`,`Employee_Birth_Date`,`Employee_Hire_Date`,`Employee_Term_Date`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 100;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
		        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("employee"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct> tHash_Lookup_group = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct>) 
					globalMap.get( "tHash_Lookup_group" ))
					;					
					
	

groupStruct groupHashKey = new groupStruct();
groupStruct groupDefault = new groupStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sectionStruct> tHash_Lookup_section = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sectionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sectionStruct>) 
					globalMap.get( "tHash_Lookup_section" ))
					;					
					
	

sectionStruct sectionHashKey = new sectionStruct();
sectionStruct sectionDefault = new sectionStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<departmentStruct> tHash_Lookup_department = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<departmentStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<departmentStruct>) 
					globalMap.get( "tHash_Lookup_department" ))
					;					
					
	

departmentStruct departmentHashKey = new departmentStruct();
departmentStruct departmentDefault = new departmentStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<companyStruct> tHash_Lookup_company = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<companyStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<companyStruct>) 
					globalMap.get( "tHash_Lookup_company" ))
					;					
					
	

companyStruct companyHashKey = new companyStruct();
companyStruct companyDefault = new companyStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<staffStruct> tHash_Lookup_staff = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<staffStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<staffStruct>) 
					globalMap.get( "tHash_Lookup_staff" ))
					;					
					
	

staffStruct staffHashKey = new staffStruct();
staffStruct staffDefault = new staffStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
organization_dimStruct organization_dim_tmp = new organization_dimStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
			String driverClass_tDBInput_1 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_1);
			
			String url_tDBInput_1 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_1 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
	        
			String atnParams_tDBInput_1 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_1 = atnParams_tDBInput_1.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_1 = new java.util.Properties();
			atnParamsPrope_tDBInput_1.put("user",dbUser_tDBInput_1);
			atnParamsPrope_tDBInput_1.put("password",dbPwd_tDBInput_1);
			atnParamsPrope_tDBInput_1.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_1.getBytes()));
			conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, atnParamsPrope_tDBInput_1);
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
+"GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								employee.EMPLOYEE_ID = null;
							} else {
	                         		
            employee.EMPLOYEE_ID = rs_tDBInput_1.getDouble(1);
            if(rs_tDBInput_1.wasNull()){
                    employee.EMPLOYEE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								employee.ORG_NAME = null;
							} else {
	                         		
        	employee.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								employee.COUNTRY = null;
							} else {
	                         		
        	employee.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								employee.ORG_LEVEL = null;
							} else {
	                         		
            employee.ORG_LEVEL = rs_tDBInput_1.getDouble(4);
            if(rs_tDBInput_1.wasNull()){
                    employee.ORG_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								employee.START_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_1 = rs_tDBInput_1.getTimestamp(5);
            if(timestamp_tDBInput_1 != null) {
                employee.START_DATE = new java.util.Date(timestamp_tDBInput_1.getTime());
            } else {
                employee.START_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								employee.END_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_1 = rs_tDBInput_1.getTimestamp(6);
            if(timestamp_tDBInput_1 != null) {
                employee.END_DATE = new java.util.Date(timestamp_tDBInput_1.getTime());
            } else {
                employee.END_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								employee.ORG_REF_ID = null;
							} else {
	                         		
            employee.ORG_REF_ID = rs_tDBInput_1.getDouble(7);
            if(rs_tDBInput_1.wasNull()){
                    employee.ORG_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//employee
			//employee


			
				
				if(execStat){
					runStat.updateStatOnConnection("employee"+iterateId,1, 1);
				}
				
				
				
			

		

			


		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "group" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopgroup = false;
       		  	    	
       		  	    	
 							groupStruct groupObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		groupHashKey.EMPLOYEE_ID = employee.ORG_REF_ID ;
                        		    		

								
		                        	groupHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_group.lookup( groupHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_group.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_group != null && tHash_Lookup_group.getCount(groupHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'group' and it contains more one result from keys :  group.EMPLOYEE_ID = '" + groupHashKey.EMPLOYEE_ID + "'");
								} // G 071
							

							groupStruct group = null;
                    		  	 
							   
                    		  	 
	       		  	    	groupStruct fromLookup_group = null;
							group = groupDefault;
										 
							
								 
							
							
								if (tHash_Lookup_group !=null && tHash_Lookup_group.hasNext()) { // G 099
								
							
								
								fromLookup_group = tHash_Lookup_group.next();

							
							
								} // G 099
							
							

							if(fromLookup_group != null) {
								group = fromLookup_group;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "section" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsection = false;
       		  	    	
       		  	    	
 							sectionStruct sectionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		sectionHashKey.EMPLOYEE_ID = group.ORG_REF_ID ;
                        		    		

								
		                        	sectionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_section.lookup( sectionHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_section.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_section != null && tHash_Lookup_section.getCount(sectionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'section' and it contains more one result from keys :  section.EMPLOYEE_ID = '" + sectionHashKey.EMPLOYEE_ID + "'");
								} // G 071
							

							sectionStruct section = null;
                    		  	 
							   
                    		  	 
	       		  	    	sectionStruct fromLookup_section = null;
							section = sectionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_section !=null && tHash_Lookup_section.hasNext()) { // G 099
								
							
								
								fromLookup_section = tHash_Lookup_section.next();

							
							
								} // G 099
							
							

							if(fromLookup_section != null) {
								section = fromLookup_section;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "department" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdepartment = false;
       		  	    	
       		  	    	
 							departmentStruct departmentObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		departmentHashKey.EMPLOYEE_ID = section.ORG_REF_ID ;
                        		    		

								
		                        	departmentHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_department.lookup( departmentHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_department.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_department != null && tHash_Lookup_department.getCount(departmentHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'department' and it contains more one result from keys :  department.EMPLOYEE_ID = '" + departmentHashKey.EMPLOYEE_ID + "'");
								} // G 071
							

							departmentStruct department = null;
                    		  	 
							   
                    		  	 
	       		  	    	departmentStruct fromLookup_department = null;
							department = departmentDefault;
										 
							
								 
							
							
								if (tHash_Lookup_department !=null && tHash_Lookup_department.hasNext()) { // G 099
								
							
								
								fromLookup_department = tHash_Lookup_department.next();

							
							
								} // G 099
							
							

							if(fromLookup_department != null) {
								department = fromLookup_department;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "company" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcompany = false;
       		  	    	
       		  	    	
 							companyStruct companyObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		companyHashKey.EMPLOYEE_ID = department.ORG_REF_ID ;
                        		    		

								
		                        	companyHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_company.lookup( companyHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_company.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_company != null && tHash_Lookup_company.getCount(companyHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'company' and it contains more one result from keys :  company.EMPLOYEE_ID = '" + companyHashKey.EMPLOYEE_ID + "'");
								} // G 071
							

							companyStruct company = null;
                    		  	 
							   
                    		  	 
	       		  	    	companyStruct fromLookup_company = null;
							company = companyDefault;
										 
							
								 
							
							
								if (tHash_Lookup_company !=null && tHash_Lookup_company.hasNext()) { // G 099
								
							
								
								fromLookup_company = tHash_Lookup_company.next();

							
							
								} // G 099
							
							

							if(fromLookup_company != null) {
								company = fromLookup_company;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "staff" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstaff = false;
       		  	    	
       		  	    	
 							staffStruct staffObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		staffHashKey.Employee_ID = employee.EMPLOYEE_ID ;
                        		    		

								
		                        	staffHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_staff.lookup( staffHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_staff != null && tHash_Lookup_staff.getCount(staffHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'staff' and it contains more one result from keys :  staff.Employee_ID = '" + staffHashKey.Employee_ID + "'");
								} // G 071
							

							staffStruct staff = null;
                    		  	 
							   
                    		  	 
	       		  	    	staffStruct fromLookup_staff = null;
							staff = staffDefault;
										 
							
								 
							
							
								if (tHash_Lookup_staff !=null && tHash_Lookup_staff.hasNext()) { // G 099
								
							
								
								fromLookup_staff = tHash_Lookup_staff.next();

							
							
								} // G 099
							
							

							if(fromLookup_staff != null) {
								staff = fromLookup_staff;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

organization_dim = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'organization_dim'
organization_dim_tmp.Employee_ID = employee.EMPLOYEE_ID ;
organization_dim_tmp.Employee_Country = employee.COUNTRY ;
organization_dim_tmp.Company = company.ORG_NAME ;
organization_dim_tmp.Department = department.ORG_NAME ;
organization_dim_tmp.Section = section.ORG_NAME ;
organization_dim_tmp.Org_Group = group.ORG_NAME ;
organization_dim_tmp.Job_Title = staff.Job_Title ;
organization_dim_tmp.Employee_Name = employee.ORG_NAME ;
organization_dim_tmp.Employee_Gender = staff.Gender ;
organization_dim_tmp.Salary = staff.Salary ;
organization_dim_tmp.Employee_Birth_Date = staff.Birth_Date ;
organization_dim_tmp.Employee_Hire_Date = staff.Emp_Hire_Date ;
organization_dim_tmp.Employee_Term_Date = staff.Emp_Term_Date ;
organization_dim = organization_dim_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "organization_dim"
if(organization_dim != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//organization_dim
			//organization_dim


			
				
				if(execStat){
					runStat.updateStatOnConnection("organization_dim"+iterateId,1, 1);
				}
				
				
				
			

		



        whetherReject_tDBOutput_1 = false;
                            pstmt_tDBOutput_1.setDouble(1, organization_dim.Employee_ID);

                            if(organization_dim.Employee_Country == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, organization_dim.Employee_Country);
}

                            if(organization_dim.Company == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, organization_dim.Company);
}

                            if(organization_dim.Department == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, organization_dim.Department);
}

                            if(organization_dim.Section == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, organization_dim.Section);
}

                            if(organization_dim.Org_Group == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, organization_dim.Org_Group);
}

                            if(organization_dim.Job_Title == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, organization_dim.Job_Title);
}

                            if(organization_dim.Employee_Name == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, organization_dim.Employee_Name);
}

                            if(organization_dim.Employee_Gender == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, organization_dim.Employee_Gender);
}

                            if(organization_dim.Salary == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(10, organization_dim.Salary);
}

                            if(organization_dim.Employee_Birth_Date != null) {
date_tDBOutput_1 = organization_dim.Employee_Birth_Date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(11, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.DATE);
}

                            if(organization_dim.Employee_Hire_Date != null) {
date_tDBOutput_1 = organization_dim.Employee_Hire_Date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(12, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
}

                            if(organization_dim.Employee_Term_Date != null) {
date_tDBOutput_1 = organization_dim.Employee_Term_Date.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(13, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(13, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.DATE);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

                      batchSizeCounter_tDBOutput_1++;
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "organization_dim"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_group != null) {
						tHash_Lookup_group.endGet();
					}
					globalMap.remove( "tHash_Lookup_group" );

					
					
				
					if(tHash_Lookup_section != null) {
						tHash_Lookup_section.endGet();
					}
					globalMap.remove( "tHash_Lookup_section" );

					
					
				
					if(tHash_Lookup_department != null) {
						tHash_Lookup_department.endGet();
					}
					globalMap.remove( "tHash_Lookup_department" );

					
					
				
					if(tHash_Lookup_company != null) {
						tHash_Lookup_company.endGet();
					}
					globalMap.remove( "tHash_Lookup_company" );

					
					
				
					if(tHash_Lookup_staff != null) {
						tHash_Lookup_staff.endGet();
					}
					globalMap.remove( "tHash_Lookup_staff" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("employee"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("organization_dim"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_group"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_section"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_department"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_company"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_staff"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class groupStruct implements routines.system.IPersistableComparableLookupRow<groupStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double EMPLOYEE_ID;

				public Double getEMPLOYEE_ID () {
					return this.EMPLOYEE_ID;
				}
				
			    public String ORG_NAME;

				public String getORG_NAME () {
					return this.ORG_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public Double ORG_LEVEL;

				public Double getORG_LEVEL () {
					return this.ORG_LEVEL;
				}
				
			    public java.util.Date START_DATE;

				public java.util.Date getSTART_DATE () {
					return this.START_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public Double ORG_REF_ID;

				public Double getORG_REF_ID () {
					return this.ORG_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final groupStruct other = (groupStruct) obj;
		
						if (this.EMPLOYEE_ID == null) {
							if (other.EMPLOYEE_ID != null)
								return false;
						
						} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(groupStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            other.ORG_NAME = this.ORG_NAME;
	            other.COUNTRY = this.COUNTRY;
	            other.ORG_LEVEL = this.ORG_LEVEL;
	            other.START_DATE = this.START_DATE;
	            other.END_DATE = this.END_DATE;
	            other.ORG_REF_ID = this.ORG_REF_ID;
	            
	}

	public void copyKeysDataTo(groupStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EMPLOYEE_ID = null;
           				} else {
           			    	this.EMPLOYEE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.EMPLOYEE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EMPLOYEE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ORG_NAME = readString(dis,ois);
					
						this.COUNTRY = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_LEVEL = null;
           				} else {
           			    	this.ORG_LEVEL = dis.readDouble();
           				}
					
						this.START_DATE = readDate(dis,ois);
					
						this.END_DATE = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_REF_ID = null;
           				} else {
           			    	this.ORG_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ORG_NAME, dos, oos);
					
						writeString(this.COUNTRY, dos, oos);
					
						if(this.ORG_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_LEVEL);
		            	}
					
						writeDate(this.START_DATE, dos, oos);
					
						writeDate(this.END_DATE, dos, oos);
					
						if(this.ORG_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPLOYEE_ID="+String.valueOf(EMPLOYEE_ID));
		sb.append(",ORG_NAME="+ORG_NAME);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",ORG_LEVEL="+String.valueOf(ORG_LEVEL));
		sb.append(",START_DATE="+String.valueOf(START_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",ORG_REF_ID="+String.valueOf(ORG_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(groupStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		groupStruct group = new groupStruct();




	
	/**
	 * [tAdvancedHash_group begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_group", false);
		start_Hash.put("tAdvancedHash_group", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_group";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("group"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_group = 0;
		

			   		// connection name:group
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(group,group) | target node:tAdvancedHash_group - inputs:(group) outputs:()
			   		// linked node: tMap_1 - inputs:(employee,group,section,department,company,staff) outputs:(organization_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_group = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<groupStruct> tHash_Lookup_group =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<groupStruct>getLookup(matchingModeEnum_group);
	   						   
		   	   	   globalMap.put("tHash_Lookup_group", tHash_Lookup_group);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_group begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
			String driverClass_tDBInput_2 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_2);
			
			String url_tDBInput_2 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_2 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
	        
			String atnParams_tDBInput_2 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_2 = atnParams_tDBInput_2.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_2 = new java.util.Properties();
			atnParamsPrope_tDBInput_2.put("user",dbUser_tDBInput_2);
			atnParamsPrope_tDBInput_2.put("password",dbPwd_tDBInput_2);
			atnParamsPrope_tDBInput_2.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_2.getBytes()));
			conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, atnParamsPrope_tDBInput_2);
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
+"GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								group.EMPLOYEE_ID = null;
							} else {
	                         		
            group.EMPLOYEE_ID = rs_tDBInput_2.getDouble(1);
            if(rs_tDBInput_2.wasNull()){
                    group.EMPLOYEE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								group.ORG_NAME = null;
							} else {
	                         		
        	group.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								group.COUNTRY = null;
							} else {
	                         		
        	group.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								group.ORG_LEVEL = null;
							} else {
	                         		
            group.ORG_LEVEL = rs_tDBInput_2.getDouble(4);
            if(rs_tDBInput_2.wasNull()){
                    group.ORG_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								group.START_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_2 = rs_tDBInput_2.getTimestamp(5);
            if(timestamp_tDBInput_2 != null) {
                group.START_DATE = new java.util.Date(timestamp_tDBInput_2.getTime());
            } else {
                group.START_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								group.END_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_2 = rs_tDBInput_2.getTimestamp(6);
            if(timestamp_tDBInput_2 != null) {
                group.END_DATE = new java.util.Date(timestamp_tDBInput_2.getTime());
            } else {
                group.END_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								group.ORG_REF_ID = null;
							} else {
	                         		
            group.ORG_REF_ID = rs_tDBInput_2.getDouble(7);
            if(rs_tDBInput_2.wasNull()){
                    group.ORG_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_group main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

			//group
			//group


			
				
				if(execStat){
					runStat.updateStatOnConnection("group"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					groupStruct group_HashRow = new groupStruct();
		   	   	   
				
				group_HashRow.EMPLOYEE_ID = group.EMPLOYEE_ID;
				
				group_HashRow.ORG_NAME = group.ORG_NAME;
				
				group_HashRow.COUNTRY = group.COUNTRY;
				
				group_HashRow.ORG_LEVEL = group.ORG_LEVEL;
				
				group_HashRow.START_DATE = group.START_DATE;
				
				group_HashRow.END_DATE = group.END_DATE;
				
				group_HashRow.ORG_REF_ID = group.ORG_REF_ID;
				
			tHash_Lookup_group.put(group_HashRow);
			
            




 


	tos_count_tAdvancedHash_group++;

/**
 * [tAdvancedHash_group main ] stop
 */
	
	/**
	 * [tAdvancedHash_group process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

 



/**
 * [tAdvancedHash_group process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_group process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

 



/**
 * [tAdvancedHash_group process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_group end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

tHash_Lookup_group.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("group"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_group", true);
end_Hash.put("tAdvancedHash_group", System.currentTimeMillis());




/**
 * [tAdvancedHash_group end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_group finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_group";

	

 



/**
 * [tAdvancedHash_group finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class sectionStruct implements routines.system.IPersistableComparableLookupRow<sectionStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double EMPLOYEE_ID;

				public Double getEMPLOYEE_ID () {
					return this.EMPLOYEE_ID;
				}
				
			    public String ORG_NAME;

				public String getORG_NAME () {
					return this.ORG_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public Double ORG_LEVEL;

				public Double getORG_LEVEL () {
					return this.ORG_LEVEL;
				}
				
			    public java.util.Date START_DATE;

				public java.util.Date getSTART_DATE () {
					return this.START_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public Double ORG_REF_ID;

				public Double getORG_REF_ID () {
					return this.ORG_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sectionStruct other = (sectionStruct) obj;
		
						if (this.EMPLOYEE_ID == null) {
							if (other.EMPLOYEE_ID != null)
								return false;
						
						} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sectionStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            other.ORG_NAME = this.ORG_NAME;
	            other.COUNTRY = this.COUNTRY;
	            other.ORG_LEVEL = this.ORG_LEVEL;
	            other.START_DATE = this.START_DATE;
	            other.END_DATE = this.END_DATE;
	            other.ORG_REF_ID = this.ORG_REF_ID;
	            
	}

	public void copyKeysDataTo(sectionStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EMPLOYEE_ID = null;
           				} else {
           			    	this.EMPLOYEE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.EMPLOYEE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EMPLOYEE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ORG_NAME = readString(dis,ois);
					
						this.COUNTRY = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_LEVEL = null;
           				} else {
           			    	this.ORG_LEVEL = dis.readDouble();
           				}
					
						this.START_DATE = readDate(dis,ois);
					
						this.END_DATE = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_REF_ID = null;
           				} else {
           			    	this.ORG_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ORG_NAME, dos, oos);
					
						writeString(this.COUNTRY, dos, oos);
					
						if(this.ORG_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_LEVEL);
		            	}
					
						writeDate(this.START_DATE, dos, oos);
					
						writeDate(this.END_DATE, dos, oos);
					
						if(this.ORG_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPLOYEE_ID="+String.valueOf(EMPLOYEE_ID));
		sb.append(",ORG_NAME="+ORG_NAME);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",ORG_LEVEL="+String.valueOf(ORG_LEVEL));
		sb.append(",START_DATE="+String.valueOf(START_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",ORG_REF_ID="+String.valueOf(ORG_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sectionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		sectionStruct section = new sectionStruct();




	
	/**
	 * [tAdvancedHash_section begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_section", false);
		start_Hash.put("tAdvancedHash_section", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_section";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("section"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_section = 0;
		

			   		// connection name:section
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(section,section) | target node:tAdvancedHash_section - inputs:(section) outputs:()
			   		// linked node: tMap_1 - inputs:(employee,group,section,department,company,staff) outputs:(organization_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_section = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sectionStruct> tHash_Lookup_section =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sectionStruct>getLookup(matchingModeEnum_section);
	   						   
		   	   	   globalMap.put("tHash_Lookup_section", tHash_Lookup_section);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_section begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
			String driverClass_tDBInput_3 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_3);
			
			String url_tDBInput_3 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_3 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
	        
			String atnParams_tDBInput_3 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_3 = atnParams_tDBInput_3.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_3 = new java.util.Properties();
			atnParamsPrope_tDBInput_3.put("user",dbUser_tDBInput_3);
			atnParamsPrope_tDBInput_3.put("password",dbPwd_tDBInput_3);
			atnParamsPrope_tDBInput_3.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_3.getBytes()));
			conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, atnParamsPrope_tDBInput_3);
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
+"GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								section.EMPLOYEE_ID = null;
							} else {
	                         		
            section.EMPLOYEE_ID = rs_tDBInput_3.getDouble(1);
            if(rs_tDBInput_3.wasNull()){
                    section.EMPLOYEE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								section.ORG_NAME = null;
							} else {
	                         		
        	section.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								section.COUNTRY = null;
							} else {
	                         		
        	section.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								section.ORG_LEVEL = null;
							} else {
	                         		
            section.ORG_LEVEL = rs_tDBInput_3.getDouble(4);
            if(rs_tDBInput_3.wasNull()){
                    section.ORG_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								section.START_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_3 = rs_tDBInput_3.getTimestamp(5);
            if(timestamp_tDBInput_3 != null) {
                section.START_DATE = new java.util.Date(timestamp_tDBInput_3.getTime());
            } else {
                section.START_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								section.END_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_3 = rs_tDBInput_3.getTimestamp(6);
            if(timestamp_tDBInput_3 != null) {
                section.END_DATE = new java.util.Date(timestamp_tDBInput_3.getTime());
            } else {
                section.END_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								section.ORG_REF_ID = null;
							} else {
	                         		
            section.ORG_REF_ID = rs_tDBInput_3.getDouble(7);
            if(rs_tDBInput_3.wasNull()){
                    section.ORG_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_section main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_section";

	

			//section
			//section


			
				
				if(execStat){
					runStat.updateStatOnConnection("section"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					sectionStruct section_HashRow = new sectionStruct();
		   	   	   
				
				section_HashRow.EMPLOYEE_ID = section.EMPLOYEE_ID;
				
				section_HashRow.ORG_NAME = section.ORG_NAME;
				
				section_HashRow.COUNTRY = section.COUNTRY;
				
				section_HashRow.ORG_LEVEL = section.ORG_LEVEL;
				
				section_HashRow.START_DATE = section.START_DATE;
				
				section_HashRow.END_DATE = section.END_DATE;
				
				section_HashRow.ORG_REF_ID = section.ORG_REF_ID;
				
			tHash_Lookup_section.put(section_HashRow);
			
            




 


	tos_count_tAdvancedHash_section++;

/**
 * [tAdvancedHash_section main ] stop
 */
	
	/**
	 * [tAdvancedHash_section process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_section";

	

 



/**
 * [tAdvancedHash_section process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_section process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_section";

	

 



/**
 * [tAdvancedHash_section process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_section end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_section";

	

tHash_Lookup_section.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("section"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_section", true);
end_Hash.put("tAdvancedHash_section", System.currentTimeMillis());




/**
 * [tAdvancedHash_section end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_section finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_section";

	

 



/**
 * [tAdvancedHash_section finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class departmentStruct implements routines.system.IPersistableComparableLookupRow<departmentStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double EMPLOYEE_ID;

				public Double getEMPLOYEE_ID () {
					return this.EMPLOYEE_ID;
				}
				
			    public String ORG_NAME;

				public String getORG_NAME () {
					return this.ORG_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public Double ORG_LEVEL;

				public Double getORG_LEVEL () {
					return this.ORG_LEVEL;
				}
				
			    public java.util.Date START_DATE;

				public java.util.Date getSTART_DATE () {
					return this.START_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public Double ORG_REF_ID;

				public Double getORG_REF_ID () {
					return this.ORG_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final departmentStruct other = (departmentStruct) obj;
		
						if (this.EMPLOYEE_ID == null) {
							if (other.EMPLOYEE_ID != null)
								return false;
						
						} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(departmentStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            other.ORG_NAME = this.ORG_NAME;
	            other.COUNTRY = this.COUNTRY;
	            other.ORG_LEVEL = this.ORG_LEVEL;
	            other.START_DATE = this.START_DATE;
	            other.END_DATE = this.END_DATE;
	            other.ORG_REF_ID = this.ORG_REF_ID;
	            
	}

	public void copyKeysDataTo(departmentStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EMPLOYEE_ID = null;
           				} else {
           			    	this.EMPLOYEE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.EMPLOYEE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EMPLOYEE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ORG_NAME = readString(dis,ois);
					
						this.COUNTRY = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_LEVEL = null;
           				} else {
           			    	this.ORG_LEVEL = dis.readDouble();
           				}
					
						this.START_DATE = readDate(dis,ois);
					
						this.END_DATE = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_REF_ID = null;
           				} else {
           			    	this.ORG_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ORG_NAME, dos, oos);
					
						writeString(this.COUNTRY, dos, oos);
					
						if(this.ORG_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_LEVEL);
		            	}
					
						writeDate(this.START_DATE, dos, oos);
					
						writeDate(this.END_DATE, dos, oos);
					
						if(this.ORG_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPLOYEE_ID="+String.valueOf(EMPLOYEE_ID));
		sb.append(",ORG_NAME="+ORG_NAME);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",ORG_LEVEL="+String.valueOf(ORG_LEVEL));
		sb.append(",START_DATE="+String.valueOf(START_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",ORG_REF_ID="+String.valueOf(ORG_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(departmentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		departmentStruct department = new departmentStruct();




	
	/**
	 * [tAdvancedHash_department begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_department", false);
		start_Hash.put("tAdvancedHash_department", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_department";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("department"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_department = 0;
		

			   		// connection name:department
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(department,department) | target node:tAdvancedHash_department - inputs:(department) outputs:()
			   		// linked node: tMap_1 - inputs:(employee,group,section,department,company,staff) outputs:(organization_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_department = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<departmentStruct> tHash_Lookup_department =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<departmentStruct>getLookup(matchingModeEnum_department);
	   						   
		   	   	   globalMap.put("tHash_Lookup_department", tHash_Lookup_department);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_department begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
			String driverClass_tDBInput_5 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_5);
			
			String url_tDBInput_5 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_5 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
	        
			String atnParams_tDBInput_5 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_5 = atnParams_tDBInput_5.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_5 = new java.util.Properties();
			atnParamsPrope_tDBInput_5.put("user",dbUser_tDBInput_5);
			atnParamsPrope_tDBInput_5.put("password",dbPwd_tDBInput_5);
			atnParamsPrope_tDBInput_5.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_5.getBytes()));
			conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, atnParamsPrope_tDBInput_5);
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
+"GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								department.EMPLOYEE_ID = null;
							} else {
	                         		
            department.EMPLOYEE_ID = rs_tDBInput_5.getDouble(1);
            if(rs_tDBInput_5.wasNull()){
                    department.EMPLOYEE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								department.ORG_NAME = null;
							} else {
	                         		
        	department.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								department.COUNTRY = null;
							} else {
	                         		
        	department.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								department.ORG_LEVEL = null;
							} else {
	                         		
            department.ORG_LEVEL = rs_tDBInput_5.getDouble(4);
            if(rs_tDBInput_5.wasNull()){
                    department.ORG_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								department.START_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_5 = rs_tDBInput_5.getTimestamp(5);
            if(timestamp_tDBInput_5 != null) {
                department.START_DATE = new java.util.Date(timestamp_tDBInput_5.getTime());
            } else {
                department.START_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								department.END_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_5 = rs_tDBInput_5.getTimestamp(6);
            if(timestamp_tDBInput_5 != null) {
                department.END_DATE = new java.util.Date(timestamp_tDBInput_5.getTime());
            } else {
                department.END_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								department.ORG_REF_ID = null;
							} else {
	                         		
            department.ORG_REF_ID = rs_tDBInput_5.getDouble(7);
            if(rs_tDBInput_5.wasNull()){
                    department.ORG_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_department main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_department";

	

			//department
			//department


			
				
				if(execStat){
					runStat.updateStatOnConnection("department"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					departmentStruct department_HashRow = new departmentStruct();
		   	   	   
				
				department_HashRow.EMPLOYEE_ID = department.EMPLOYEE_ID;
				
				department_HashRow.ORG_NAME = department.ORG_NAME;
				
				department_HashRow.COUNTRY = department.COUNTRY;
				
				department_HashRow.ORG_LEVEL = department.ORG_LEVEL;
				
				department_HashRow.START_DATE = department.START_DATE;
				
				department_HashRow.END_DATE = department.END_DATE;
				
				department_HashRow.ORG_REF_ID = department.ORG_REF_ID;
				
			tHash_Lookup_department.put(department_HashRow);
			
            




 


	tos_count_tAdvancedHash_department++;

/**
 * [tAdvancedHash_department main ] stop
 */
	
	/**
	 * [tAdvancedHash_department process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_department";

	

 



/**
 * [tAdvancedHash_department process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_department process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_department";

	

 



/**
 * [tAdvancedHash_department process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_department end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_department";

	

tHash_Lookup_department.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("department"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_department", true);
end_Hash.put("tAdvancedHash_department", System.currentTimeMillis());




/**
 * [tAdvancedHash_department end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_department finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_department";

	

 



/**
 * [tAdvancedHash_department finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class companyStruct implements routines.system.IPersistableComparableLookupRow<companyStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double EMPLOYEE_ID;

				public Double getEMPLOYEE_ID () {
					return this.EMPLOYEE_ID;
				}
				
			    public String ORG_NAME;

				public String getORG_NAME () {
					return this.ORG_NAME;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public Double ORG_LEVEL;

				public Double getORG_LEVEL () {
					return this.ORG_LEVEL;
				}
				
			    public java.util.Date START_DATE;

				public java.util.Date getSTART_DATE () {
					return this.START_DATE;
				}
				
			    public java.util.Date END_DATE;

				public java.util.Date getEND_DATE () {
					return this.END_DATE;
				}
				
			    public Double ORG_REF_ID;

				public Double getORG_REF_ID () {
					return this.ORG_REF_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final companyStruct other = (companyStruct) obj;
		
						if (this.EMPLOYEE_ID == null) {
							if (other.EMPLOYEE_ID != null)
								return false;
						
						} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(companyStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            other.ORG_NAME = this.ORG_NAME;
	            other.COUNTRY = this.COUNTRY;
	            other.ORG_LEVEL = this.ORG_LEVEL;
	            other.START_DATE = this.START_DATE;
	            other.END_DATE = this.END_DATE;
	            other.ORG_REF_ID = this.ORG_REF_ID;
	            
	}

	public void copyKeysDataTo(companyStruct other) {

		other.EMPLOYEE_ID = this.EMPLOYEE_ID;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EMPLOYEE_ID = null;
           				} else {
           			    	this.EMPLOYEE_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.EMPLOYEE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EMPLOYEE_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ORG_NAME = readString(dis,ois);
					
						this.COUNTRY = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_LEVEL = null;
           				} else {
           			    	this.ORG_LEVEL = dis.readDouble();
           				}
					
						this.START_DATE = readDate(dis,ois);
					
						this.END_DATE = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORG_REF_ID = null;
           				} else {
           			    	this.ORG_REF_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ORG_NAME, dos, oos);
					
						writeString(this.COUNTRY, dos, oos);
					
						if(this.ORG_LEVEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_LEVEL);
		            	}
					
						writeDate(this.START_DATE, dos, oos);
					
						writeDate(this.END_DATE, dos, oos);
					
						if(this.ORG_REF_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORG_REF_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("EMPLOYEE_ID="+String.valueOf(EMPLOYEE_ID));
		sb.append(",ORG_NAME="+ORG_NAME);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",ORG_LEVEL="+String.valueOf(ORG_LEVEL));
		sb.append(",START_DATE="+String.valueOf(START_DATE));
		sb.append(",END_DATE="+String.valueOf(END_DATE));
		sb.append(",ORG_REF_ID="+String.valueOf(ORG_REF_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(companyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.EMPLOYEE_ID, other.EMPLOYEE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		companyStruct company = new companyStruct();




	
	/**
	 * [tAdvancedHash_company begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_company", false);
		start_Hash.put("tAdvancedHash_company", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_company";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("company"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_company = 0;
		

			   		// connection name:company
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(company,company) | target node:tAdvancedHash_company - inputs:(company) outputs:()
			   		// linked node: tMap_1 - inputs:(employee,group,section,department,company,staff) outputs:(organization_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_company = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<companyStruct> tHash_Lookup_company =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<companyStruct>getLookup(matchingModeEnum_company);
	   						   
		   	   	   globalMap.put("tHash_Lookup_company", tHash_Lookup_company);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_company begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
			String driverClass_tDBInput_4 = "net.ucanaccess.jdbc.UcanaccessDriver";
			java.lang.Class.forName(driverClass_tDBInput_4);
			
			String url_tDBInput_4 = "jdbc:ucanaccess://" + "/home/comocoder/orion/orion.mdb" + ";jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;singleConnection=true";
	        String dbUser_tDBInput_4 = "";
	        
    		
    		
    		 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
		   	
	        String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
	        
			String atnParams_tDBInput_4 = "jackcessOpener=org.talend.ucanaccess.encrypt.CryptCodecOpener;memory=false";
			atnParams_tDBInput_4 = atnParams_tDBInput_4.replaceAll("&", "\n");
			java.util.Properties atnParamsPrope_tDBInput_4 = new java.util.Properties();
			atnParamsPrope_tDBInput_4.put("user",dbUser_tDBInput_4);
			atnParamsPrope_tDBInput_4.put("password",dbPwd_tDBInput_4);
			atnParamsPrope_tDBInput_4.load(new java.io.ByteArrayInputStream(atnParams_tDBInput_4.getBytes()));
			conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, atnParamsPrope_tDBInput_4);
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  ORGANIZATION.EMPLOYEE_ID, \n  ORGANIZATION.ORG_NAME, \n  ORGANIZATION.COUNTRY, \n  ORGANIZATION.ORG_LEVEL, \n  OR"
+"GANIZATION.START_DATE, \n  ORGANIZATION.END_DATE, \n  ORGANIZATION.ORG_REF_ID\nFROM ORGANIZATION";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								company.EMPLOYEE_ID = null;
							} else {
	                         		
            company.EMPLOYEE_ID = rs_tDBInput_4.getDouble(1);
            if(rs_tDBInput_4.wasNull()){
                    company.EMPLOYEE_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								company.ORG_NAME = null;
							} else {
	                         		
        	company.ORG_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								company.COUNTRY = null;
							} else {
	                         		
        	company.COUNTRY = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								company.ORG_LEVEL = null;
							} else {
	                         		
            company.ORG_LEVEL = rs_tDBInput_4.getDouble(4);
            if(rs_tDBInput_4.wasNull()){
                    company.ORG_LEVEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								company.START_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_4 = rs_tDBInput_4.getTimestamp(5);
            if(timestamp_tDBInput_4 != null) {
                company.START_DATE = new java.util.Date(timestamp_tDBInput_4.getTime());
            } else {
                company.START_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								company.END_DATE = null;
							} else {
										
            java.sql.Timestamp timestamp_tDBInput_4 = rs_tDBInput_4.getTimestamp(6);
            if(timestamp_tDBInput_4 != null) {
                company.END_DATE = new java.util.Date(timestamp_tDBInput_4.getTime());
            } else {
                company.END_DATE =  null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								company.ORG_REF_ID = null;
							} else {
	                         		
            company.ORG_REF_ID = rs_tDBInput_4.getDouble(7);
            if(rs_tDBInput_4.wasNull()){
                    company.ORG_REF_ID = null;
            }
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_company main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_company";

	

			//company
			//company


			
				
				if(execStat){
					runStat.updateStatOnConnection("company"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					companyStruct company_HashRow = new companyStruct();
		   	   	   
				
				company_HashRow.EMPLOYEE_ID = company.EMPLOYEE_ID;
				
				company_HashRow.ORG_NAME = company.ORG_NAME;
				
				company_HashRow.COUNTRY = company.COUNTRY;
				
				company_HashRow.ORG_LEVEL = company.ORG_LEVEL;
				
				company_HashRow.START_DATE = company.START_DATE;
				
				company_HashRow.END_DATE = company.END_DATE;
				
				company_HashRow.ORG_REF_ID = company.ORG_REF_ID;
				
			tHash_Lookup_company.put(company_HashRow);
			
            




 


	tos_count_tAdvancedHash_company++;

/**
 * [tAdvancedHash_company main ] stop
 */
	
	/**
	 * [tAdvancedHash_company process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_company";

	

 



/**
 * [tAdvancedHash_company process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_company process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_company";

	

 



/**
 * [tAdvancedHash_company process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_company end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_company";

	

tHash_Lookup_company.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("company"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_company", true);
end_Hash.put("tAdvancedHash_company", System.currentTimeMillis());




/**
 * [tAdvancedHash_company end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_company finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_company";

	

 



/**
 * [tAdvancedHash_company finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class staffStruct implements routines.system.IPersistableComparableLookupRow<staffStruct> {
    final static byte[] commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
    static byte[] commonByteArray_ORION_PROJECT_Job03_Organization_Dim = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Double Employee_ID;

				public Double getEmployee_ID () {
					return this.Employee_ID;
				}
				
			    public java.util.Date Start_Date;

				public java.util.Date getStart_Date () {
					return this.Start_Date;
				}
				
			    public java.util.Date End_Date;

				public java.util.Date getEnd_Date () {
					return this.End_Date;
				}
				
			    public String Job_Title;

				public String getJob_Title () {
					return this.Job_Title;
				}
				
			    public Double Salary;

				public Double getSalary () {
					return this.Salary;
				}
				
			    public String Gender;

				public String getGender () {
					return this.Gender;
				}
				
			    public java.util.Date Birth_Date;

				public java.util.Date getBirth_Date () {
					return this.Birth_Date;
				}
				
			    public java.util.Date Emp_Hire_Date;

				public java.util.Date getEmp_Hire_Date () {
					return this.Emp_Hire_Date;
				}
				
			    public java.util.Date Emp_Term_Date;

				public java.util.Date getEmp_Term_Date () {
					return this.Emp_Term_Date;
				}
				
			    public Double Manager_ID;

				public Double getManager_ID () {
					return this.Manager_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Employee_ID == null) ? 0 : this.Employee_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final staffStruct other = (staffStruct) obj;
		
						if (this.Employee_ID == null) {
							if (other.Employee_ID != null)
								return false;
						
						} else if (!this.Employee_ID.equals(other.Employee_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(staffStruct other) {

		other.Employee_ID = this.Employee_ID;
	            other.Start_Date = this.Start_Date;
	            other.End_Date = this.End_Date;
	            other.Job_Title = this.Job_Title;
	            other.Salary = this.Salary;
	            other.Gender = this.Gender;
	            other.Birth_Date = this.Birth_Date;
	            other.Emp_Hire_Date = this.Emp_Hire_Date;
	            other.Emp_Term_Date = this.Emp_Term_Date;
	            other.Manager_ID = this.Manager_ID;
	            
	}

	public void copyKeysDataTo(staffStruct other) {

		other.Employee_ID = this.Employee_ID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ORION_PROJECT_Job03_Organization_Dim) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Employee_ID = null;
           				} else {
           			    	this.Employee_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.Employee_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Employee_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Start_Date = readDate(dis,ois);
					
						this.End_Date = readDate(dis,ois);
					
						this.Job_Title = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Salary = null;
           				} else {
           			    	this.Salary = dis.readDouble();
           				}
					
						this.Gender = readString(dis,ois);
					
						this.Birth_Date = readDate(dis,ois);
					
						this.Emp_Hire_Date = readDate(dis,ois);
					
						this.Emp_Term_Date = readDate(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Manager_ID = null;
           				} else {
           			    	this.Manager_ID = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.Start_Date, dos, oos);
					
						writeDate(this.End_Date, dos, oos);
					
						writeString(this.Job_Title, dos, oos);
					
						if(this.Salary == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Salary);
		            	}
					
						writeString(this.Gender, dos, oos);
					
						writeDate(this.Birth_Date, dos, oos);
					
						writeDate(this.Emp_Hire_Date, dos, oos);
					
						writeDate(this.Emp_Term_Date, dos, oos);
					
						if(this.Manager_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.Manager_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Employee_ID="+String.valueOf(Employee_ID));
		sb.append(",Start_Date="+String.valueOf(Start_Date));
		sb.append(",End_Date="+String.valueOf(End_Date));
		sb.append(",Job_Title="+Job_Title);
		sb.append(",Salary="+String.valueOf(Salary));
		sb.append(",Gender="+Gender);
		sb.append(",Birth_Date="+String.valueOf(Birth_Date));
		sb.append(",Emp_Hire_Date="+String.valueOf(Emp_Hire_Date));
		sb.append(",Emp_Term_Date="+String.valueOf(Emp_Term_Date));
		sb.append(",Manager_ID="+String.valueOf(Manager_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(staffStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Employee_ID, other.Employee_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		staffStruct staff = new staffStruct();




	
	/**
	 * [tAdvancedHash_staff begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_staff", false);
		start_Hash.put("tAdvancedHash_staff", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_staff";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("staff"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_staff = 0;
		

			   		// connection name:staff
			   		// source node:tFileInputExcel_1 - inputs:(after_tDBInput_1) outputs:(staff,staff) | target node:tAdvancedHash_staff - inputs:(staff) outputs:()
			   		// linked node: tMap_1 - inputs:(employee,group,section,department,company,staff) outputs:(organization_dim)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_staff = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<staffStruct> tHash_Lookup_staff =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<staffStruct>getLookup(matchingModeEnum_staff);
	   						   
		   	   	   globalMap.put("tHash_Lookup_staff", tHash_Lookup_staff);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_staff begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		



			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

			        if(useRegex){//this part process the regex issue

				        jxl.Sheet[] sheets = workbook.getSheets();
				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (int i = 0; i < sheets.length; i++) {
				            String sheetName = sheets[i].getName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	jxl.Sheet sheet = workbook.getSheet(sheetName);
				            	if(sheet != null){
				                	list.add(sheet);
				                }
				            }
				        }

			        }else{
			        	jxl.Sheet sheet = workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
			    	java.util.List<jxl.Sheet> list =  new java.util.ArrayList<jxl.Sheet>();
			    	jxl.Sheet sheet = workbook.getSheet(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}


		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();
		final jxl.WorkbookSettings workbookSettings_tFileInputExcel_1 = new jxl.WorkbookSettings();
		workbookSettings_tFileInputExcel_1.setDrawingsDisabled(true);
        workbookSettings_tFileInputExcel_1.setEncoding("UTF-8");

        Object source_tFileInputExcel_1 ="/home/comocoder/orion/staff.xls";
        final jxl.Workbook workbook_tFileInputExcel_1;

        java.io.InputStream toClose_tFileInputExcel_1 = null;
        java.io.BufferedInputStream buffIStreamtFileInputExcel_1 = null;
        try {
            if(source_tFileInputExcel_1 instanceof java.io.InputStream){
        		toClose_tFileInputExcel_1 = (java.io.InputStream)source_tFileInputExcel_1;
        		buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
        		workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1, workbookSettings_tFileInputExcel_1);
            }else if(source_tFileInputExcel_1 instanceof String){
        		toClose_tFileInputExcel_1 = new java.io.FileInputStream(source_tFileInputExcel_1.toString());
        		buffIStreamtFileInputExcel_1 = new java.io.BufferedInputStream(toClose_tFileInputExcel_1);
        		workbook_tFileInputExcel_1 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_1, workbookSettings_tFileInputExcel_1);
            }else{
            	workbook_tFileInputExcel_1 = null;
            	throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
            }
        } finally {
			try{
			   if(buffIStreamtFileInputExcel_1 != null){
			   	  buffIStreamtFileInputExcel_1.close();
			   }
			}catch(Exception e){
			}
        }
        try {
		java.util.List<jxl.Sheet> sheetList_tFileInputExcel_1 = java.util.Arrays.<jxl.Sheet> asList(workbook_tFileInputExcel_1.getSheets());
        if(sheetList_tFileInputExcel_1.size() <= 0){
        	throw new RuntimeException("Special sheets not exist!");
        }

        java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_1 = new java.util.ArrayList<jxl.Sheet>();
        for(jxl.Sheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1){
        	if(sheet_FilterNull_tFileInputExcel_1.getRows()>0){
        		sheet_FilterNullList_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
        	}
        }
		sheetList_tFileInputExcel_1 = sheet_FilterNullList_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
        int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(jxl.Sheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
        	end_line_tFileInputExcel_1+=sheet_tFileInputExcel_1.getRows();
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getColumns();
        jxl.Cell[] row_tFileInputExcel_1 = null;
        jxl.Sheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0).getRows();

        //for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
		char separatorChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
		
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRows();
            }
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
        	globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getName());
    		staff = null;
    		staff = null;
					int tempRowLength_tFileInputExcel_1 = 10;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
//
//end%>
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	row_tFileInputExcel_1.length ? row_tFileInputExcel_1.length : end_column_tFileInputExcel_1;

				java.util.TimeZone zone_tFileInputExcel_1 = java.util.TimeZone.getTimeZone("GMT");
                java.text.SimpleDateFormat sdf_tFileInputExcel_1 = new java.text.SimpleDateFormat("dd-MM-yyyy");
                sdf_tFileInputExcel_1.setTimeZone(zone_tFileInputExcel_1);
                

			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){

				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){

				  jxl.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1[i + start_column_tFileInputExcel_1];
                        temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getContents();

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}

			boolean whetherReject_tFileInputExcel_1 = false;
			staff = new staffStruct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try {
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Employee_ID";
			staff.Employee_ID = ParserUtils.parseTo_Double(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else {
				staff.Employee_ID = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Start_Date";
			if(1<actual_end_column_tFileInputExcel_1){
				try{
					java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell)row_tFileInputExcel_1[columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1]).getDate();
					staff.Start_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_1.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
				}
			}
			}else {
				staff.Start_Date = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "End_Date";
			if(2<actual_end_column_tFileInputExcel_1){
				try{
					java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell)row_tFileInputExcel_1[columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1]).getDate();
					staff.End_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_1.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
				}
			}
			}else {
				staff.End_Date = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Job_Title";
			staff.Job_Title = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else {
				staff.Job_Title = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Salary";
			staff.Salary = ParserUtils.parseTo_Double(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else {
				staff.Salary = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Gender";
			staff.Gender = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else {
				staff.Gender = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Birth_Date";
			if(6<actual_end_column_tFileInputExcel_1){
				try{
					java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell)row_tFileInputExcel_1[columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1]).getDate();
					staff.Birth_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_1.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
				}
			}
			}else {
				staff.Birth_Date = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Emp_Hire_Date";
			if(7<actual_end_column_tFileInputExcel_1){
				try{
					java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell)row_tFileInputExcel_1[columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1]).getDate();
					staff.Emp_Hire_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_1.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
				}
			}
			}else {
				staff.Emp_Hire_Date = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Emp_Term_Date";
			if(8<actual_end_column_tFileInputExcel_1){
				try{
					java.util.Date dateGMT_tFileInputExcel_1 = ((jxl.DateCell)row_tFileInputExcel_1[columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1]).getDate();
					staff.Emp_Term_Date = new java.util.Date(dateGMT_tFileInputExcel_1.getTime() - java.util.TimeZone.getDefault().getOffset(dateGMT_tFileInputExcel_1.getTime()));
				}catch(java.lang.Exception e){
					
					throw new RuntimeException("The cell format is not Date in ( Row. "+(nb_line_tFileInputExcel_1+1)+ " and ColumnNum. " + curColNum_tFileInputExcel_1 + " )");
				}
			}
			}else {
				staff.Emp_Term_Date = null;
				emptyColumnCount_tFileInputExcel_1++;
		}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Manager_ID";
			staff.Manager_ID = ParserUtils.parseTo_Double(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]);
			}else {
				staff.Manager_ID = null;
				emptyColumnCount_tFileInputExcel_1++;
		}

			nb_line_tFileInputExcel_1++;
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputExcel_1 = true;
                System.err.println(e.getMessage());
                staff = null;
    }

					
		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "staff"
if(staff != null) { 



	
	/**
	 * [tAdvancedHash_staff main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_staff";

	

			//staff
			//staff


			
				
				if(execStat){
					runStat.updateStatOnConnection("staff"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					staffStruct staff_HashRow = new staffStruct();
		   	   	   
				
				staff_HashRow.Employee_ID = staff.Employee_ID;
				
				staff_HashRow.Start_Date = staff.Start_Date;
				
				staff_HashRow.End_Date = staff.End_Date;
				
				staff_HashRow.Job_Title = staff.Job_Title;
				
				staff_HashRow.Salary = staff.Salary;
				
				staff_HashRow.Gender = staff.Gender;
				
				staff_HashRow.Birth_Date = staff.Birth_Date;
				
				staff_HashRow.Emp_Hire_Date = staff.Emp_Hire_Date;
				
				staff_HashRow.Emp_Term_Date = staff.Emp_Term_Date;
				
				staff_HashRow.Manager_ID = staff.Manager_ID;
				
			tHash_Lookup_staff.put(staff_HashRow);
			
            




 


	tos_count_tAdvancedHash_staff++;

/**
 * [tAdvancedHash_staff main ] stop
 */
	
	/**
	 * [tAdvancedHash_staff process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_staff";

	

 



/**
 * [tAdvancedHash_staff process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_staff process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_staff";

	

 



/**
 * [tAdvancedHash_staff process_data_end ] stop
 */

} // End of branch "staff"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
					if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
						workbook_tFileInputExcel_1.close();
					}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_staff end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_staff";

	

tHash_Lookup_staff.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("staff"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_staff", true);
end_Hash.put("tAdvancedHash_staff", System.currentTimeMillis());




/**
 * [tAdvancedHash_staff end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_staff finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_staff";

	

 



/**
 * [tAdvancedHash_staff finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Job03_Organization_Dim Job03_Organization_DimClass = new Job03_Organization_Dim();

        int exitCode = Job03_Organization_DimClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Job03_Organization_Dim.class.getClassLoader().getResourceAsStream("orion_project/job03_organization_dim_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Job03_Organization_Dim.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job03_Organization_Dim");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     190681 characters generated by Talend Open Studio for Data Integration 
 *     on the December 20, 2019 at 9:45:16 PM SAST
 ************************************************************************************************/